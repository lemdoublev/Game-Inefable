// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The total count and truncated list of information of content inside this folder
    /// that has a different audience than the link on this folder. This is only returned for
    /// folders.</para>
    /// </summary>
    public class AudienceExceptions
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<AudienceExceptions> Encoder = new AudienceExceptionsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<AudienceExceptions> Decoder = new AudienceExceptionsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AudienceExceptions" />
        /// class.</para>
        /// </summary>
        /// <param name="count">The count</param>
        /// <param name="exceptions">A truncated list of some of the content that is an
        /// exception. The length of this list could be smaller than the count since it is only
        /// a sample but will not be empty as long as count is not 0.</param>
        public AudienceExceptions(uint count,
                                  col.IEnumerable<AudienceExceptionContentInfo> exceptions)
        {
            var exceptionsList = enc.Util.ToList(exceptions);

            if (exceptions == null)
            {
                throw new sys.ArgumentNullException("exceptions");
            }

            this.Count = count;
            this.Exceptions = exceptionsList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AudienceExceptions" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public AudienceExceptions()
        {
        }

        /// <summary>
        /// <para>Gets the count of the audience exceptions</para>
        /// </summary>
        public uint Count { get; protected set; }

        /// <summary>
        /// <para>A truncated list of some of the content that is an exception. The length of
        /// this list could be smaller than the count since it is only a sample but will not be
        /// empty as long as count is not 0.</para>
        /// </summary>
        public col.IList<AudienceExceptionContentInfo> Exceptions { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="AudienceExceptions" />.</para>
        /// </summary>
        private class AudienceExceptionsEncoder : enc.StructEncoder<AudienceExceptions>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(AudienceExceptions value, enc.IJsonWriter writer)
            {
                WriteProperty("count", value.Count, writer, enc.UInt32Encoder.Instance);
                WriteListProperty("exceptions", value.Exceptions, writer, global::Dropbox.Api.Sharing.AudienceExceptionContentInfo.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="AudienceExceptions" />.</para>
        /// </summary>
        private class AudienceExceptionsDecoder : enc.StructDecoder<AudienceExceptions>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="AudienceExceptions" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override AudienceExceptions Create()
            {
                return new AudienceExceptions();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(AudienceExceptions value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "count":
                        value.Count = enc.UInt32Decoder.Instance.Decode(reader);
                        break;
                    case "exceptions":
                        value.Exceptions = ReadList<AudienceExceptionContentInfo>(reader, global::Dropbox.Api.Sharing.AudienceExceptionContentInfo.Decoder);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

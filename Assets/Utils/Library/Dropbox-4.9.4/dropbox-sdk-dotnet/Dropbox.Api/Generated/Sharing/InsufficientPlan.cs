// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The insufficient plan object</para>
    /// </summary>
    public class InsufficientPlan
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<InsufficientPlan> Encoder = new InsufficientPlanEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<InsufficientPlan> Decoder = new InsufficientPlanDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="InsufficientPlan" />
        /// class.</para>
        /// </summary>
        /// <param name="message">A message to tell the user to upgrade in order to support
        /// expected action.</param>
        /// <param name="upsellUrl">A URL to send the user to in order to obtain the account
        /// type they need, e.g. upgrading. Absent if there is no action the user can take to
        /// upgrade.</param>
        public InsufficientPlan(string message,
                                string upsellUrl = null)
        {
            if (message == null)
            {
                throw new sys.ArgumentNullException("message");
            }

            this.Message = message;
            this.UpsellUrl = upsellUrl;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="InsufficientPlan" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public InsufficientPlan()
        {
        }

        /// <summary>
        /// <para>A message to tell the user to upgrade in order to support expected
        /// action.</para>
        /// </summary>
        public string Message { get; protected set; }

        /// <summary>
        /// <para>A URL to send the user to in order to obtain the account type they need, e.g.
        /// upgrading. Absent if there is no action the user can take to upgrade.</para>
        /// </summary>
        public string UpsellUrl { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="InsufficientPlan" />.</para>
        /// </summary>
        private class InsufficientPlanEncoder : enc.StructEncoder<InsufficientPlan>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(InsufficientPlan value, enc.IJsonWriter writer)
            {
                WriteProperty("message", value.Message, writer, enc.StringEncoder.Instance);
                if (value.UpsellUrl != null)
                {
                    WriteProperty("upsell_url", value.UpsellUrl, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="InsufficientPlan" />.</para>
        /// </summary>
        private class InsufficientPlanDecoder : enc.StructDecoder<InsufficientPlan>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="InsufficientPlan" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override InsufficientPlan Create()
            {
                return new InsufficientPlan();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(InsufficientPlan value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "message":
                        value.Message = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "upsell_url":
                        value.UpsellUrl = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Basic information about a user. Use <see
    /// cref="Dropbox.Api.Users.Routes.UsersUserRoutes.GetAccountAsync" /> and <see
    /// cref="Dropbox.Api.Users.Routes.UsersUserRoutes.GetAccountBatchAsync" /> to obtain more
    /// detailed information.</para>
    /// </summary>
    /// <seealso cref="UserFileMembershipInfo" />
    /// <seealso cref="UserMembershipInfo" />
    public class UserInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UserInfo> Encoder = new UserInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UserInfo> Decoder = new UserInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserInfo" /> class.</para>
        /// </summary>
        /// <param name="accountId">The account ID of the user.</param>
        /// <param name="email">Email address of user.</param>
        /// <param name="displayName">The display name of the user.</param>
        /// <param name="sameTeam">If the user is in the same team as current user.</param>
        /// <param name="teamMemberId">The team member ID of the shared folder member. Only
        /// present if <paramref name="sameTeam" /> is true.</param>
        public UserInfo(string accountId,
                        string email,
                        string displayName,
                        bool sameTeam,
                        string teamMemberId = null)
        {
            if (accountId == null)
            {
                throw new sys.ArgumentNullException("accountId");
            }
            if (accountId.Length < 40)
            {
                throw new sys.ArgumentOutOfRangeException("accountId", "Length should be at least 40");
            }
            if (accountId.Length > 40)
            {
                throw new sys.ArgumentOutOfRangeException("accountId", "Length should be at most 40");
            }

            if (email == null)
            {
                throw new sys.ArgumentNullException("email");
            }

            if (displayName == null)
            {
                throw new sys.ArgumentNullException("displayName");
            }

            this.AccountId = accountId;
            this.Email = email;
            this.DisplayName = displayName;
            this.SameTeam = sameTeam;
            this.TeamMemberId = teamMemberId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public UserInfo()
        {
        }

        /// <summary>
        /// <para>The account ID of the user.</para>
        /// </summary>
        public string AccountId { get; protected set; }

        /// <summary>
        /// <para>Email address of user.</para>
        /// </summary>
        public string Email { get; protected set; }

        /// <summary>
        /// <para>The display name of the user.</para>
        /// </summary>
        public string DisplayName { get; protected set; }

        /// <summary>
        /// <para>If the user is in the same team as current user.</para>
        /// </summary>
        public bool SameTeam { get; protected set; }

        /// <summary>
        /// <para>The team member ID of the shared folder member. Only present if <see
        /// cref="SameTeam" /> is true.</para>
        /// </summary>
        public string TeamMemberId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UserInfo" />.</para>
        /// </summary>
        private class UserInfoEncoder : enc.StructEncoder<UserInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UserInfo value, enc.IJsonWriter writer)
            {
                WriteProperty("account_id", value.AccountId, writer, enc.StringEncoder.Instance);
                WriteProperty("email", value.Email, writer, enc.StringEncoder.Instance);
                WriteProperty("display_name", value.DisplayName, writer, enc.StringEncoder.Instance);
                WriteProperty("same_team", value.SameTeam, writer, enc.BooleanEncoder.Instance);
                if (value.TeamMemberId != null)
                {
                    WriteProperty("team_member_id", value.TeamMemberId, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UserInfo" />.</para>
        /// </summary>
        private class UserInfoDecoder : enc.StructDecoder<UserInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UserInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UserInfo Create()
            {
                return new UserInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(UserInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "account_id":
                        value.AccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "email":
                        value.Email = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "display_name":
                        value.DisplayName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "same_team":
                        value.SameTeam = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "team_member_id":
                        value.TeamMemberId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

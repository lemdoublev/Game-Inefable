// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The expected metadata of a shared link for a file or folder when a link is first
    /// created for the content. Absent if the link already exists.</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Sharing.SharedContentLinkMetadataBase" />
    public class ExpectedSharedContentLinkMetadata : SharedContentLinkMetadataBase
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ExpectedSharedContentLinkMetadata> Encoder = new ExpectedSharedContentLinkMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ExpectedSharedContentLinkMetadata> Decoder = new ExpectedSharedContentLinkMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="ExpectedSharedContentLinkMetadata" /> class.</para>
        /// </summary>
        /// <param name="audienceOptions">The audience options that are available for the
        /// content. Some audience options may be unavailable. For example, team_only may be
        /// unavailable if the content is not owned by a user on a team. The 'default' audience
        /// option is always available if the user can modify link settings.</param>
        /// <param name="currentAudience">The current audience of the link.</param>
        /// <param name="linkPermissions">A list of permissions for actions you can perform on
        /// the link.</param>
        /// <param name="passwordProtected">Whether the link is protected by a
        /// password.</param>
        /// <param name="accessLevel">The access level on the link for this file.</param>
        /// <param name="audienceRestrictingSharedFolder">The shared folder that prevents the
        /// link audience for this link from being more restrictive.</param>
        /// <param name="expiry">Whether the link has an expiry set on it. A link with an
        /// expiry will have its  audience changed to members when the expiry is
        /// reached.</param>
        public ExpectedSharedContentLinkMetadata(col.IEnumerable<LinkAudience> audienceOptions,
                                                 LinkAudience currentAudience,
                                                 col.IEnumerable<LinkPermission> linkPermissions,
                                                 bool passwordProtected,
                                                 AccessLevel accessLevel = null,
                                                 AudienceRestrictingSharedFolder audienceRestrictingSharedFolder = null,
                                                 sys.DateTime? expiry = null)
            : base(audienceOptions, currentAudience, linkPermissions, passwordProtected, accessLevel, audienceRestrictingSharedFolder, expiry)
        {
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see
        /// cref="ExpectedSharedContentLinkMetadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public ExpectedSharedContentLinkMetadata()
        {
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ExpectedSharedContentLinkMetadata" />.</para>
        /// </summary>
        private class ExpectedSharedContentLinkMetadataEncoder : enc.StructEncoder<ExpectedSharedContentLinkMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ExpectedSharedContentLinkMetadata value, enc.IJsonWriter writer)
            {
                WriteListProperty("audience_options", value.AudienceOptions, writer, global::Dropbox.Api.Sharing.LinkAudience.Encoder);
                WriteProperty("current_audience", value.CurrentAudience, writer, global::Dropbox.Api.Sharing.LinkAudience.Encoder);
                WriteListProperty("link_permissions", value.LinkPermissions, writer, global::Dropbox.Api.Sharing.LinkPermission.Encoder);
                WriteProperty("password_protected", value.PasswordProtected, writer, enc.BooleanEncoder.Instance);
                if (value.AccessLevel != null)
                {
                    WriteProperty("access_level", value.AccessLevel, writer, global::Dropbox.Api.Sharing.AccessLevel.Encoder);
                }
                if (value.AudienceRestrictingSharedFolder != null)
                {
                    WriteProperty("audience_restricting_shared_folder", value.AudienceRestrictingSharedFolder, writer, global::Dropbox.Api.Sharing.AudienceRestrictingSharedFolder.Encoder);
                }
                if (value.Expiry != null)
                {
                    WriteProperty("expiry", value.Expiry.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ExpectedSharedContentLinkMetadata" />.</para>
        /// </summary>
        private class ExpectedSharedContentLinkMetadataDecoder : enc.StructDecoder<ExpectedSharedContentLinkMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see
            /// cref="ExpectedSharedContentLinkMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ExpectedSharedContentLinkMetadata Create()
            {
                return new ExpectedSharedContentLinkMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ExpectedSharedContentLinkMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "audience_options":
                        value.AudienceOptions = ReadList<LinkAudience>(reader, global::Dropbox.Api.Sharing.LinkAudience.Decoder);
                        break;
                    case "current_audience":
                        value.CurrentAudience = global::Dropbox.Api.Sharing.LinkAudience.Decoder.Decode(reader);
                        break;
                    case "link_permissions":
                        value.LinkPermissions = ReadList<LinkPermission>(reader, global::Dropbox.Api.Sharing.LinkPermission.Decoder);
                        break;
                    case "password_protected":
                        value.PasswordProtected = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "access_level":
                        value.AccessLevel = global::Dropbox.Api.Sharing.AccessLevel.Decoder.Decode(reader);
                        break;
                    case "audience_restricting_shared_folder":
                        value.AudienceRestrictingSharedFolder = global::Dropbox.Api.Sharing.AudienceRestrictingSharedFolder.Decoder.Decode(reader);
                        break;
                    case "expiry":
                        value.Expiry = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

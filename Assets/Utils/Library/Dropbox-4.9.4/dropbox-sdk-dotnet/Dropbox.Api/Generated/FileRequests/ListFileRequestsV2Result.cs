// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileRequests
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Result for <see
    /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListV2Async" /> and <see
    /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListContinueAsync"
    /// />.</para>
    /// </summary>
    public class ListFileRequestsV2Result
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListFileRequestsV2Result> Encoder = new ListFileRequestsV2ResultEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListFileRequestsV2Result> Decoder = new ListFileRequestsV2ResultDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileRequestsV2Result" />
        /// class.</para>
        /// </summary>
        /// <param name="fileRequests">The file requests owned by this user. Apps with the app
        /// folder permission will only see file requests in their app folder.</param>
        /// <param name="cursor">Pass the cursor into <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListContinueAsync" />
        /// to obtain additional file requests.</param>
        /// <param name="hasMore">Is true if there are additional file requests that have not
        /// been returned yet. An additional call to :route:list/continue` can retrieve
        /// them.</param>
        public ListFileRequestsV2Result(col.IEnumerable<FileRequest> fileRequests,
                                        string cursor,
                                        bool hasMore)
        {
            var fileRequestsList = enc.Util.ToList(fileRequests);

            if (fileRequests == null)
            {
                throw new sys.ArgumentNullException("fileRequests");
            }

            if (cursor == null)
            {
                throw new sys.ArgumentNullException("cursor");
            }

            this.FileRequests = fileRequestsList;
            this.Cursor = cursor;
            this.HasMore = hasMore;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFileRequestsV2Result" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public ListFileRequestsV2Result()
        {
        }

        /// <summary>
        /// <para>The file requests owned by this user. Apps with the app folder permission
        /// will only see file requests in their app folder.</para>
        /// </summary>
        public col.IList<FileRequest> FileRequests { get; protected set; }

        /// <summary>
        /// <para>Pass the cursor into <see
        /// cref="Dropbox.Api.FileRequests.Routes.FileRequestsUserRoutes.ListContinueAsync" />
        /// to obtain additional file requests.</para>
        /// </summary>
        public string Cursor { get; protected set; }

        /// <summary>
        /// <para>Is true if there are additional file requests that have not been returned
        /// yet. An additional call to :route:list/continue` can retrieve them.</para>
        /// </summary>
        public bool HasMore { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListFileRequestsV2Result" />.</para>
        /// </summary>
        private class ListFileRequestsV2ResultEncoder : enc.StructEncoder<ListFileRequestsV2Result>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListFileRequestsV2Result value, enc.IJsonWriter writer)
            {
                WriteListProperty("file_requests", value.FileRequests, writer, global::Dropbox.Api.FileRequests.FileRequest.Encoder);
                WriteProperty("cursor", value.Cursor, writer, enc.StringEncoder.Instance);
                WriteProperty("has_more", value.HasMore, writer, enc.BooleanEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListFileRequestsV2Result" />.</para>
        /// </summary>
        private class ListFileRequestsV2ResultDecoder : enc.StructDecoder<ListFileRequestsV2Result>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListFileRequestsV2Result"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListFileRequestsV2Result Create()
            {
                return new ListFileRequestsV2Result();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListFileRequestsV2Result value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "file_requests":
                        value.FileRequests = ReadList<FileRequest>(reader, global::Dropbox.Api.FileRequests.FileRequest.Decoder);
                        break;
                    case "cursor":
                        value.Cursor = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "has_more":
                        value.HasMore = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

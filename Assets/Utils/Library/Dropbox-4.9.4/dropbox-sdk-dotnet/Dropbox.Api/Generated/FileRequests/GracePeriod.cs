// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileRequests
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The grace period object</para>
    /// </summary>
    public class GracePeriod
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GracePeriod> Encoder = new GracePeriodEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GracePeriod> Decoder = new GracePeriodDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GracePeriod" /> class.</para>
        /// </summary>
        public GracePeriod()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is OneDay</para>
        /// </summary>
        public bool IsOneDay
        {
            get
            {
                return this is OneDay;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a OneDay, or <c>null</c>.</para>
        /// </summary>
        public OneDay AsOneDay
        {
            get
            {
                return this as OneDay;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TwoDays</para>
        /// </summary>
        public bool IsTwoDays
        {
            get
            {
                return this is TwoDays;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TwoDays, or <c>null</c>.</para>
        /// </summary>
        public TwoDays AsTwoDays
        {
            get
            {
                return this as TwoDays;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SevenDays</para>
        /// </summary>
        public bool IsSevenDays
        {
            get
            {
                return this is SevenDays;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SevenDays, or <c>null</c>.</para>
        /// </summary>
        public SevenDays AsSevenDays
        {
            get
            {
                return this as SevenDays;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ThirtyDays</para>
        /// </summary>
        public bool IsThirtyDays
        {
            get
            {
                return this is ThirtyDays;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ThirtyDays, or <c>null</c>.</para>
        /// </summary>
        public ThirtyDays AsThirtyDays
        {
            get
            {
                return this as ThirtyDays;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Always</para>
        /// </summary>
        public bool IsAlways
        {
            get
            {
                return this is Always;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Always, or <c>null</c>.</para>
        /// </summary>
        public Always AsAlways
        {
            get
            {
                return this as Always;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GracePeriod" />.</para>
        /// </summary>
        private class GracePeriodEncoder : enc.StructEncoder<GracePeriod>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GracePeriod value, enc.IJsonWriter writer)
            {
                if (value is OneDay)
                {
                    WriteProperty(".tag", "one_day", writer, enc.StringEncoder.Instance);
                    OneDay.Encoder.EncodeFields((OneDay)value, writer);
                    return;
                }
                if (value is TwoDays)
                {
                    WriteProperty(".tag", "two_days", writer, enc.StringEncoder.Instance);
                    TwoDays.Encoder.EncodeFields((TwoDays)value, writer);
                    return;
                }
                if (value is SevenDays)
                {
                    WriteProperty(".tag", "seven_days", writer, enc.StringEncoder.Instance);
                    SevenDays.Encoder.EncodeFields((SevenDays)value, writer);
                    return;
                }
                if (value is ThirtyDays)
                {
                    WriteProperty(".tag", "thirty_days", writer, enc.StringEncoder.Instance);
                    ThirtyDays.Encoder.EncodeFields((ThirtyDays)value, writer);
                    return;
                }
                if (value is Always)
                {
                    WriteProperty(".tag", "always", writer, enc.StringEncoder.Instance);
                    Always.Encoder.EncodeFields((Always)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GracePeriod" />.</para>
        /// </summary>
        private class GracePeriodDecoder : enc.UnionDecoder<GracePeriod>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GracePeriod" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GracePeriod Create()
            {
                return new GracePeriod();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GracePeriod Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "one_day":
                        return OneDay.Decoder.DecodeFields(reader);
                    case "two_days":
                        return TwoDays.Decoder.DecodeFields(reader);
                    case "seven_days":
                        return SevenDays.Decoder.DecodeFields(reader);
                    case "thirty_days":
                        return ThirtyDays.Decoder.DecodeFields(reader);
                    case "always":
                        return Always.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The one day object</para>
        /// </summary>
        public sealed class OneDay : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<OneDay> Encoder = new OneDayEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<OneDay> Decoder = new OneDayDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="OneDay" /> class.</para>
            /// </summary>
            private OneDay()
            {
            }

            /// <summary>
            /// <para>A singleton instance of OneDay</para>
            /// </summary>
            public static readonly OneDay Instance = new OneDay();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="OneDay" />.</para>
            /// </summary>
            private class OneDayEncoder : enc.StructEncoder<OneDay>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(OneDay value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="OneDay" />.</para>
            /// </summary>
            private class OneDayDecoder : enc.StructDecoder<OneDay>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="OneDay" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override OneDay Create()
                {
                    return OneDay.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The two days object</para>
        /// </summary>
        public sealed class TwoDays : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TwoDays> Encoder = new TwoDaysEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TwoDays> Decoder = new TwoDaysDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TwoDays" /> class.</para>
            /// </summary>
            private TwoDays()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TwoDays</para>
            /// </summary>
            public static readonly TwoDays Instance = new TwoDays();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TwoDays" />.</para>
            /// </summary>
            private class TwoDaysEncoder : enc.StructEncoder<TwoDays>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TwoDays value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TwoDays" />.</para>
            /// </summary>
            private class TwoDaysDecoder : enc.StructDecoder<TwoDays>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TwoDays" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TwoDays Create()
                {
                    return TwoDays.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The seven days object</para>
        /// </summary>
        public sealed class SevenDays : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<SevenDays> Encoder = new SevenDaysEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<SevenDays> Decoder = new SevenDaysDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SevenDays" /> class.</para>
            /// </summary>
            private SevenDays()
            {
            }

            /// <summary>
            /// <para>A singleton instance of SevenDays</para>
            /// </summary>
            public static readonly SevenDays Instance = new SevenDays();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="SevenDays" />.</para>
            /// </summary>
            private class SevenDaysEncoder : enc.StructEncoder<SevenDays>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(SevenDays value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="SevenDays" />.</para>
            /// </summary>
            private class SevenDaysDecoder : enc.StructDecoder<SevenDays>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="SevenDays" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override SevenDays Create()
                {
                    return SevenDays.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The thirty days object</para>
        /// </summary>
        public sealed class ThirtyDays : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ThirtyDays> Encoder = new ThirtyDaysEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ThirtyDays> Decoder = new ThirtyDaysDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ThirtyDays" /> class.</para>
            /// </summary>
            private ThirtyDays()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ThirtyDays</para>
            /// </summary>
            public static readonly ThirtyDays Instance = new ThirtyDays();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ThirtyDays" />.</para>
            /// </summary>
            private class ThirtyDaysEncoder : enc.StructEncoder<ThirtyDays>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ThirtyDays value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ThirtyDays" />.</para>
            /// </summary>
            private class ThirtyDaysDecoder : enc.StructDecoder<ThirtyDays>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ThirtyDays" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ThirtyDays Create()
                {
                    return ThirtyDays.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The always object</para>
        /// </summary>
        public sealed class Always : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Always> Encoder = new AlwaysEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Always> Decoder = new AlwaysDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Always" /> class.</para>
            /// </summary>
            private Always()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Always</para>
            /// </summary>
            public static readonly Always Instance = new Always();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Always" />.</para>
            /// </summary>
            private class AlwaysEncoder : enc.StructEncoder<Always>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Always value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Always" />.</para>
            /// </summary>
            private class AlwaysDecoder : enc.StructDecoder<Always>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Always" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Always Create()
                {
                    return Always.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : GracePeriod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

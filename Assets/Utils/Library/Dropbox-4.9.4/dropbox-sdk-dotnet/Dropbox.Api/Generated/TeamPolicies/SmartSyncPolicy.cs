// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamPolicies
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The smart sync policy object</para>
    /// </summary>
    public class SmartSyncPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SmartSyncPolicy> Encoder = new SmartSyncPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SmartSyncPolicy> Decoder = new SmartSyncPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SmartSyncPolicy" />
        /// class.</para>
        /// </summary>
        public SmartSyncPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Local</para>
        /// </summary>
        public bool IsLocal
        {
            get
            {
                return this is Local;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Local, or <c>null</c>.</para>
        /// </summary>
        public Local AsLocal
        {
            get
            {
                return this as Local;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is OnDemand</para>
        /// </summary>
        public bool IsOnDemand
        {
            get
            {
                return this is OnDemand;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a OnDemand, or <c>null</c>.</para>
        /// </summary>
        public OnDemand AsOnDemand
        {
            get
            {
                return this as OnDemand;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SmartSyncPolicy" />.</para>
        /// </summary>
        private class SmartSyncPolicyEncoder : enc.StructEncoder<SmartSyncPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SmartSyncPolicy value, enc.IJsonWriter writer)
            {
                if (value is Local)
                {
                    WriteProperty(".tag", "local", writer, enc.StringEncoder.Instance);
                    Local.Encoder.EncodeFields((Local)value, writer);
                    return;
                }
                if (value is OnDemand)
                {
                    WriteProperty(".tag", "on_demand", writer, enc.StringEncoder.Instance);
                    OnDemand.Encoder.EncodeFields((OnDemand)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SmartSyncPolicy" />.</para>
        /// </summary>
        private class SmartSyncPolicyDecoder : enc.UnionDecoder<SmartSyncPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SmartSyncPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SmartSyncPolicy Create()
            {
                return new SmartSyncPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SmartSyncPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "local":
                        return Local.Decoder.DecodeFields(reader);
                    case "on_demand":
                        return OnDemand.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The specified content will be synced as local files by default.</para>
        /// </summary>
        public sealed class Local : SmartSyncPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Local> Encoder = new LocalEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Local> Decoder = new LocalDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Local" /> class.</para>
            /// </summary>
            private Local()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Local</para>
            /// </summary>
            public static readonly Local Instance = new Local();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Local" />.</para>
            /// </summary>
            private class LocalEncoder : enc.StructEncoder<Local>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Local value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Local" />.</para>
            /// </summary>
            private class LocalDecoder : enc.StructDecoder<Local>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Local" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Local Create()
                {
                    return Local.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The specified content will be synced as on-demand files by default.</para>
        /// </summary>
        public sealed class OnDemand : SmartSyncPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<OnDemand> Encoder = new OnDemandEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<OnDemand> Decoder = new OnDemandDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="OnDemand" /> class.</para>
            /// </summary>
            private OnDemand()
            {
            }

            /// <summary>
            /// <para>A singleton instance of OnDemand</para>
            /// </summary>
            public static readonly OnDemand Instance = new OnDemand();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="OnDemand" />.</para>
            /// </summary>
            private class OnDemandEncoder : enc.StructEncoder<OnDemand>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(OnDemand value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="OnDemand" />.</para>
            /// </summary>
            private class OnDemandDecoder : enc.StructDecoder<OnDemand>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="OnDemand" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override OnDemand Create()
                {
                    return OnDemand.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SmartSyncPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamPolicies
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper default folder policy object</para>
    /// </summary>
    public class PaperDefaultFolderPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperDefaultFolderPolicy> Encoder = new PaperDefaultFolderPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperDefaultFolderPolicy> Decoder = new PaperDefaultFolderPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperDefaultFolderPolicy" />
        /// class.</para>
        /// </summary>
        public PaperDefaultFolderPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is EveryoneInTeam</para>
        /// </summary>
        public bool IsEveryoneInTeam
        {
            get
            {
                return this is EveryoneInTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a EveryoneInTeam, or <c>null</c>.</para>
        /// </summary>
        public EveryoneInTeam AsEveryoneInTeam
        {
            get
            {
                return this as EveryoneInTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InviteOnly</para>
        /// </summary>
        public bool IsInviteOnly
        {
            get
            {
                return this is InviteOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InviteOnly, or <c>null</c>.</para>
        /// </summary>
        public InviteOnly AsInviteOnly
        {
            get
            {
                return this as InviteOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperDefaultFolderPolicy" />.</para>
        /// </summary>
        private class PaperDefaultFolderPolicyEncoder : enc.StructEncoder<PaperDefaultFolderPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperDefaultFolderPolicy value, enc.IJsonWriter writer)
            {
                if (value is EveryoneInTeam)
                {
                    WriteProperty(".tag", "everyone_in_team", writer, enc.StringEncoder.Instance);
                    EveryoneInTeam.Encoder.EncodeFields((EveryoneInTeam)value, writer);
                    return;
                }
                if (value is InviteOnly)
                {
                    WriteProperty(".tag", "invite_only", writer, enc.StringEncoder.Instance);
                    InviteOnly.Encoder.EncodeFields((InviteOnly)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperDefaultFolderPolicy" />.</para>
        /// </summary>
        private class PaperDefaultFolderPolicyDecoder : enc.UnionDecoder<PaperDefaultFolderPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperDefaultFolderPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperDefaultFolderPolicy Create()
            {
                return new PaperDefaultFolderPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperDefaultFolderPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "everyone_in_team":
                        return EveryoneInTeam.Decoder.DecodeFields(reader);
                    case "invite_only":
                        return InviteOnly.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Everyone in team will be the default option when creating a folder in
        /// Paper.</para>
        /// </summary>
        public sealed class EveryoneInTeam : PaperDefaultFolderPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<EveryoneInTeam> Encoder = new EveryoneInTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<EveryoneInTeam> Decoder = new EveryoneInTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="EveryoneInTeam" />
            /// class.</para>
            /// </summary>
            private EveryoneInTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of EveryoneInTeam</para>
            /// </summary>
            public static readonly EveryoneInTeam Instance = new EveryoneInTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="EveryoneInTeam" />.</para>
            /// </summary>
            private class EveryoneInTeamEncoder : enc.StructEncoder<EveryoneInTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(EveryoneInTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="EveryoneInTeam" />.</para>
            /// </summary>
            private class EveryoneInTeamDecoder : enc.StructDecoder<EveryoneInTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="EveryoneInTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override EveryoneInTeam Create()
                {
                    return EveryoneInTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Invite only will be the default option when creating a folder in
        /// Paper.</para>
        /// </summary>
        public sealed class InviteOnly : PaperDefaultFolderPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InviteOnly> Encoder = new InviteOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InviteOnly> Decoder = new InviteOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InviteOnly" /> class.</para>
            /// </summary>
            private InviteOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InviteOnly</para>
            /// </summary>
            public static readonly InviteOnly Instance = new InviteOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InviteOnly" />.</para>
            /// </summary>
            private class InviteOnlyEncoder : enc.StructEncoder<InviteOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InviteOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InviteOnly" />.</para>
            /// </summary>
            private class InviteOnlyDecoder : enc.StructDecoder<InviteOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InviteOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InviteOnly Create()
                {
                    return InviteOnly.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperDefaultFolderPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

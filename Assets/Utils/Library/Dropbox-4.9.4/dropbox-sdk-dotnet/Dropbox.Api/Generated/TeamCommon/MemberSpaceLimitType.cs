// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamCommon
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The type of the space limit imposed on a team member.</para>
    /// </summary>
    public class MemberSpaceLimitType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<MemberSpaceLimitType> Encoder = new MemberSpaceLimitTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<MemberSpaceLimitType> Decoder = new MemberSpaceLimitTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="MemberSpaceLimitType" />
        /// class.</para>
        /// </summary>
        public MemberSpaceLimitType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Off</para>
        /// </summary>
        public bool IsOff
        {
            get
            {
                return this is Off;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Off, or <c>null</c>.</para>
        /// </summary>
        public Off AsOff
        {
            get
            {
                return this as Off;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AlertOnly</para>
        /// </summary>
        public bool IsAlertOnly
        {
            get
            {
                return this is AlertOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AlertOnly, or <c>null</c>.</para>
        /// </summary>
        public AlertOnly AsAlertOnly
        {
            get
            {
                return this as AlertOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is StopSync</para>
        /// </summary>
        public bool IsStopSync
        {
            get
            {
                return this is StopSync;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a StopSync, or <c>null</c>.</para>
        /// </summary>
        public StopSync AsStopSync
        {
            get
            {
                return this as StopSync;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="MemberSpaceLimitType" />.</para>
        /// </summary>
        private class MemberSpaceLimitTypeEncoder : enc.StructEncoder<MemberSpaceLimitType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(MemberSpaceLimitType value, enc.IJsonWriter writer)
            {
                if (value is Off)
                {
                    WriteProperty(".tag", "off", writer, enc.StringEncoder.Instance);
                    Off.Encoder.EncodeFields((Off)value, writer);
                    return;
                }
                if (value is AlertOnly)
                {
                    WriteProperty(".tag", "alert_only", writer, enc.StringEncoder.Instance);
                    AlertOnly.Encoder.EncodeFields((AlertOnly)value, writer);
                    return;
                }
                if (value is StopSync)
                {
                    WriteProperty(".tag", "stop_sync", writer, enc.StringEncoder.Instance);
                    StopSync.Encoder.EncodeFields((StopSync)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="MemberSpaceLimitType" />.</para>
        /// </summary>
        private class MemberSpaceLimitTypeDecoder : enc.UnionDecoder<MemberSpaceLimitType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="MemberSpaceLimitType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override MemberSpaceLimitType Create()
            {
                return new MemberSpaceLimitType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override MemberSpaceLimitType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "off":
                        return Off.Decoder.DecodeFields(reader);
                    case "alert_only":
                        return AlertOnly.Decoder.DecodeFields(reader);
                    case "stop_sync":
                        return StopSync.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The team member does not have imposed space limit.</para>
        /// </summary>
        public sealed class Off : MemberSpaceLimitType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Off> Encoder = new OffEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Off> Decoder = new OffDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Off" /> class.</para>
            /// </summary>
            private Off()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Off</para>
            /// </summary>
            public static readonly Off Instance = new Off();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffEncoder : enc.StructEncoder<Off>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Off value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffDecoder : enc.StructDecoder<Off>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Off" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Off Create()
                {
                    return Off.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The team member has soft imposed space limit - the limit is used for display
        /// and for notifications.</para>
        /// </summary>
        public sealed class AlertOnly : MemberSpaceLimitType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AlertOnly> Encoder = new AlertOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AlertOnly> Decoder = new AlertOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AlertOnly" /> class.</para>
            /// </summary>
            private AlertOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AlertOnly</para>
            /// </summary>
            public static readonly AlertOnly Instance = new AlertOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AlertOnly" />.</para>
            /// </summary>
            private class AlertOnlyEncoder : enc.StructEncoder<AlertOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AlertOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AlertOnly" />.</para>
            /// </summary>
            private class AlertOnlyDecoder : enc.StructDecoder<AlertOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AlertOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AlertOnly Create()
                {
                    return AlertOnly.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The team member has hard imposed space limit - Dropbox file sync will stop
        /// after the limit is reached.</para>
        /// </summary>
        public sealed class StopSync : MemberSpaceLimitType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<StopSync> Encoder = new StopSyncEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<StopSync> Decoder = new StopSyncDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="StopSync" /> class.</para>
            /// </summary>
            private StopSync()
            {
            }

            /// <summary>
            /// <para>A singleton instance of StopSync</para>
            /// </summary>
            public static readonly StopSync Instance = new StopSync();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="StopSync" />.</para>
            /// </summary>
            private class StopSyncEncoder : enc.StructEncoder<StopSync>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(StopSync value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="StopSync" />.</para>
            /// </summary>
            private class StopSyncDecoder : enc.StructDecoder<StopSync>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="StopSync" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override StopSync Create()
                {
                    return StopSync.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : MemberSpaceLimitType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

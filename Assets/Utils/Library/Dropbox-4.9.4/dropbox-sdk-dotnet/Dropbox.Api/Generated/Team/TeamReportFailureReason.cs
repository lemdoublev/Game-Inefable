// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The team report failure reason object</para>
    /// </summary>
    public class TeamReportFailureReason
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TeamReportFailureReason> Encoder = new TeamReportFailureReasonEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TeamReportFailureReason> Decoder = new TeamReportFailureReasonDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamReportFailureReason" />
        /// class.</para>
        /// </summary>
        public TeamReportFailureReason()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TemporaryError</para>
        /// </summary>
        public bool IsTemporaryError
        {
            get
            {
                return this is TemporaryError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TemporaryError, or <c>null</c>.</para>
        /// </summary>
        public TemporaryError AsTemporaryError
        {
            get
            {
                return this as TemporaryError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ManyReportsAtOnce</para>
        /// </summary>
        public bool IsManyReportsAtOnce
        {
            get
            {
                return this is ManyReportsAtOnce;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ManyReportsAtOnce, or <c>null</c>.</para>
        /// </summary>
        public ManyReportsAtOnce AsManyReportsAtOnce
        {
            get
            {
                return this as ManyReportsAtOnce;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooMuchData</para>
        /// </summary>
        public bool IsTooMuchData
        {
            get
            {
                return this is TooMuchData;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooMuchData, or <c>null</c>.</para>
        /// </summary>
        public TooMuchData AsTooMuchData
        {
            get
            {
                return this as TooMuchData;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TeamReportFailureReason" />.</para>
        /// </summary>
        private class TeamReportFailureReasonEncoder : enc.StructEncoder<TeamReportFailureReason>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TeamReportFailureReason value, enc.IJsonWriter writer)
            {
                if (value is TemporaryError)
                {
                    WriteProperty(".tag", "temporary_error", writer, enc.StringEncoder.Instance);
                    TemporaryError.Encoder.EncodeFields((TemporaryError)value, writer);
                    return;
                }
                if (value is ManyReportsAtOnce)
                {
                    WriteProperty(".tag", "many_reports_at_once", writer, enc.StringEncoder.Instance);
                    ManyReportsAtOnce.Encoder.EncodeFields((ManyReportsAtOnce)value, writer);
                    return;
                }
                if (value is TooMuchData)
                {
                    WriteProperty(".tag", "too_much_data", writer, enc.StringEncoder.Instance);
                    TooMuchData.Encoder.EncodeFields((TooMuchData)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TeamReportFailureReason" />.</para>
        /// </summary>
        private class TeamReportFailureReasonDecoder : enc.UnionDecoder<TeamReportFailureReason>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TeamReportFailureReason"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TeamReportFailureReason Create()
            {
                return new TeamReportFailureReason();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TeamReportFailureReason Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "temporary_error":
                        return TemporaryError.Decoder.DecodeFields(reader);
                    case "many_reports_at_once":
                        return ManyReportsAtOnce.Decoder.DecodeFields(reader);
                    case "too_much_data":
                        return TooMuchData.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>We couldn't create the report, but we think this was a fluke. Everything
        /// should work if you try it again.</para>
        /// </summary>
        public sealed class TemporaryError : TeamReportFailureReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TemporaryError> Encoder = new TemporaryErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TemporaryError> Decoder = new TemporaryErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TemporaryError" />
            /// class.</para>
            /// </summary>
            private TemporaryError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TemporaryError</para>
            /// </summary>
            public static readonly TemporaryError Instance = new TemporaryError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TemporaryError" />.</para>
            /// </summary>
            private class TemporaryErrorEncoder : enc.StructEncoder<TemporaryError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TemporaryError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TemporaryError" />.</para>
            /// </summary>
            private class TemporaryErrorDecoder : enc.StructDecoder<TemporaryError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TemporaryError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TemporaryError Create()
                {
                    return TemporaryError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Too many other reports are being created right now. Try creating this report
        /// again once the others finish.</para>
        /// </summary>
        public sealed class ManyReportsAtOnce : TeamReportFailureReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ManyReportsAtOnce> Encoder = new ManyReportsAtOnceEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ManyReportsAtOnce> Decoder = new ManyReportsAtOnceDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ManyReportsAtOnce" />
            /// class.</para>
            /// </summary>
            private ManyReportsAtOnce()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ManyReportsAtOnce</para>
            /// </summary>
            public static readonly ManyReportsAtOnce Instance = new ManyReportsAtOnce();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ManyReportsAtOnce" />.</para>
            /// </summary>
            private class ManyReportsAtOnceEncoder : enc.StructEncoder<ManyReportsAtOnce>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ManyReportsAtOnce value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ManyReportsAtOnce" />.</para>
            /// </summary>
            private class ManyReportsAtOnceDecoder : enc.StructDecoder<ManyReportsAtOnce>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ManyReportsAtOnce"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ManyReportsAtOnce Create()
                {
                    return ManyReportsAtOnce.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>We couldn't create the report. Try creating the report again with less
        /// data.</para>
        /// </summary>
        public sealed class TooMuchData : TeamReportFailureReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooMuchData> Encoder = new TooMuchDataEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooMuchData> Decoder = new TooMuchDataDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooMuchData" />
            /// class.</para>
            /// </summary>
            private TooMuchData()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooMuchData</para>
            /// </summary>
            public static readonly TooMuchData Instance = new TooMuchData();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooMuchData" />.</para>
            /// </summary>
            private class TooMuchDataEncoder : enc.StructEncoder<TooMuchData>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooMuchData value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooMuchData" />.</para>
            /// </summary>
            private class TooMuchDataDecoder : enc.StructDecoder<TooMuchData>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooMuchData" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooMuchData Create()
                {
                    return TooMuchData.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : TeamReportFailureReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Properties of a namespace.</para>
    /// </summary>
    public class NamespaceMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<NamespaceMetadata> Encoder = new NamespaceMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<NamespaceMetadata> Decoder = new NamespaceMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="NamespaceMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="name">The name of this namespace.</param>
        /// <param name="namespaceId">The ID of this namespace.</param>
        /// <param name="namespaceType">The type of this namespace.</param>
        /// <param name="teamMemberId">If this is a team member or app folder, the ID of the
        /// owning team member. Otherwise, this field is not present.</param>
        public NamespaceMetadata(string name,
                                 string namespaceId,
                                 NamespaceType namespaceType,
                                 string teamMemberId = null)
        {
            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            if (namespaceId == null)
            {
                throw new sys.ArgumentNullException("namespaceId");
            }
            if (!re.Regex.IsMatch(namespaceId, @"\A(?:[-_0-9a-zA-Z:]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("namespaceId", @"Value should match pattern '\A(?:[-_0-9a-zA-Z:]+)\z'");
            }

            if (namespaceType == null)
            {
                throw new sys.ArgumentNullException("namespaceType");
            }

            this.Name = name;
            this.NamespaceId = namespaceId;
            this.NamespaceType = namespaceType;
            this.TeamMemberId = teamMemberId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="NamespaceMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public NamespaceMetadata()
        {
        }

        /// <summary>
        /// <para>The name of this namespace.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>The ID of this namespace.</para>
        /// </summary>
        public string NamespaceId { get; protected set; }

        /// <summary>
        /// <para>The type of this namespace.</para>
        /// </summary>
        public NamespaceType NamespaceType { get; protected set; }

        /// <summary>
        /// <para>If this is a team member or app folder, the ID of the owning team member.
        /// Otherwise, this field is not present.</para>
        /// </summary>
        public string TeamMemberId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="NamespaceMetadata" />.</para>
        /// </summary>
        private class NamespaceMetadataEncoder : enc.StructEncoder<NamespaceMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(NamespaceMetadata value, enc.IJsonWriter writer)
            {
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteProperty("namespace_id", value.NamespaceId, writer, enc.StringEncoder.Instance);
                WriteProperty("namespace_type", value.NamespaceType, writer, global::Dropbox.Api.Team.NamespaceType.Encoder);
                if (value.TeamMemberId != null)
                {
                    WriteProperty("team_member_id", value.TeamMemberId, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="NamespaceMetadata" />.</para>
        /// </summary>
        private class NamespaceMetadataDecoder : enc.StructDecoder<NamespaceMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="NamespaceMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override NamespaceMetadata Create()
            {
                return new NamespaceMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(NamespaceMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "namespace_id":
                        value.NamespaceId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "namespace_type":
                        value.NamespaceType = global::Dropbox.Api.Team.NamespaceType.Decoder.Decode(reader);
                        break;
                    case "team_member_id":
                        value.TeamMemberId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The team folder access error object</para>
    /// </summary>
    public class TeamFolderAccessError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TeamFolderAccessError> Encoder = new TeamFolderAccessErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TeamFolderAccessError> Decoder = new TeamFolderAccessErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TeamFolderAccessError" />
        /// class.</para>
        /// </summary>
        public TeamFolderAccessError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidTeamFolderId</para>
        /// </summary>
        public bool IsInvalidTeamFolderId
        {
            get
            {
                return this is InvalidTeamFolderId;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidTeamFolderId, or <c>null</c>.</para>
        /// </summary>
        public InvalidTeamFolderId AsInvalidTeamFolderId
        {
            get
            {
                return this as InvalidTeamFolderId;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoAccess</para>
        /// </summary>
        public bool IsNoAccess
        {
            get
            {
                return this is NoAccess;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoAccess, or <c>null</c>.</para>
        /// </summary>
        public NoAccess AsNoAccess
        {
            get
            {
                return this as NoAccess;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TeamFolderAccessError" />.</para>
        /// </summary>
        private class TeamFolderAccessErrorEncoder : enc.StructEncoder<TeamFolderAccessError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TeamFolderAccessError value, enc.IJsonWriter writer)
            {
                if (value is InvalidTeamFolderId)
                {
                    WriteProperty(".tag", "invalid_team_folder_id", writer, enc.StringEncoder.Instance);
                    InvalidTeamFolderId.Encoder.EncodeFields((InvalidTeamFolderId)value, writer);
                    return;
                }
                if (value is NoAccess)
                {
                    WriteProperty(".tag", "no_access", writer, enc.StringEncoder.Instance);
                    NoAccess.Encoder.EncodeFields((NoAccess)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TeamFolderAccessError" />.</para>
        /// </summary>
        private class TeamFolderAccessErrorDecoder : enc.UnionDecoder<TeamFolderAccessError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TeamFolderAccessError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TeamFolderAccessError Create()
            {
                return new TeamFolderAccessError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TeamFolderAccessError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "invalid_team_folder_id":
                        return InvalidTeamFolderId.Decoder.DecodeFields(reader);
                    case "no_access":
                        return NoAccess.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The team folder ID is invalid.</para>
        /// </summary>
        public sealed class InvalidTeamFolderId : TeamFolderAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidTeamFolderId> Encoder = new InvalidTeamFolderIdEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidTeamFolderId> Decoder = new InvalidTeamFolderIdDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidTeamFolderId" />
            /// class.</para>
            /// </summary>
            private InvalidTeamFolderId()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidTeamFolderId</para>
            /// </summary>
            public static readonly InvalidTeamFolderId Instance = new InvalidTeamFolderId();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidTeamFolderId" />.</para>
            /// </summary>
            private class InvalidTeamFolderIdEncoder : enc.StructEncoder<InvalidTeamFolderId>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidTeamFolderId value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidTeamFolderId" />.</para>
            /// </summary>
            private class InvalidTeamFolderIdDecoder : enc.StructDecoder<InvalidTeamFolderId>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidTeamFolderId"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidTeamFolderId Create()
                {
                    return InvalidTeamFolderId.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The authenticated app does not have permission to manage that team
        /// folder.</para>
        /// </summary>
        public sealed class NoAccess : TeamFolderAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoAccess> Encoder = new NoAccessEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoAccess> Decoder = new NoAccessDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoAccess" /> class.</para>
            /// </summary>
            private NoAccess()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoAccess</para>
            /// </summary>
            public static readonly NoAccess Instance = new NoAccess();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoAccess" />.</para>
            /// </summary>
            private class NoAccessEncoder : enc.StructEncoder<NoAccess>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoAccess value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoAccess" />.</para>
            /// </summary>
            private class NoAccessDecoder : enc.StructDecoder<NoAccess>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoAccess" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoAccess Create()
                {
                    return NoAccess.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : TeamFolderAccessError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

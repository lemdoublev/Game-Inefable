// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The value for <see cref="Dropbox.Api.Team.Feature.UploadApiRateLimit" />.</para>
    /// </summary>
    public class UploadApiRateLimitValue
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UploadApiRateLimitValue> Encoder = new UploadApiRateLimitValueEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UploadApiRateLimitValue> Decoder = new UploadApiRateLimitValueDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UploadApiRateLimitValue" />
        /// class.</para>
        /// </summary>
        public UploadApiRateLimitValue()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Unlimited</para>
        /// </summary>
        public bool IsUnlimited
        {
            get
            {
                return this is Unlimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Unlimited, or <c>null</c>.</para>
        /// </summary>
        public Unlimited AsUnlimited
        {
            get
            {
                return this as Unlimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Limit</para>
        /// </summary>
        public bool IsLimit
        {
            get
            {
                return this is Limit;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Limit, or <c>null</c>.</para>
        /// </summary>
        public Limit AsLimit
        {
            get
            {
                return this as Limit;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UploadApiRateLimitValue" />.</para>
        /// </summary>
        private class UploadApiRateLimitValueEncoder : enc.StructEncoder<UploadApiRateLimitValue>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UploadApiRateLimitValue value, enc.IJsonWriter writer)
            {
                if (value is Unlimited)
                {
                    WriteProperty(".tag", "unlimited", writer, enc.StringEncoder.Instance);
                    Unlimited.Encoder.EncodeFields((Unlimited)value, writer);
                    return;
                }
                if (value is Limit)
                {
                    WriteProperty(".tag", "limit", writer, enc.StringEncoder.Instance);
                    Limit.Encoder.EncodeFields((Limit)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UploadApiRateLimitValue" />.</para>
        /// </summary>
        private class UploadApiRateLimitValueDecoder : enc.UnionDecoder<UploadApiRateLimitValue>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UploadApiRateLimitValue"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UploadApiRateLimitValue Create()
            {
                return new UploadApiRateLimitValue();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UploadApiRateLimitValue Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "unlimited":
                        return Unlimited.Decoder.DecodeFields(reader);
                    case "limit":
                        return Limit.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>This team has unlimited upload API quota. So far both server version account
        /// and legacy  account type have unlimited monthly upload api quota.</para>
        /// </summary>
        public sealed class Unlimited : UploadApiRateLimitValue
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Unlimited> Encoder = new UnlimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Unlimited> Decoder = new UnlimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Unlimited" /> class.</para>
            /// </summary>
            private Unlimited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Unlimited</para>
            /// </summary>
            public static readonly Unlimited Instance = new Unlimited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Unlimited" />.</para>
            /// </summary>
            private class UnlimitedEncoder : enc.StructEncoder<Unlimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Unlimited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Unlimited" />.</para>
            /// </summary>
            private class UnlimitedDecoder : enc.StructDecoder<Unlimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Unlimited" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Unlimited Create()
                {
                    return Unlimited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The number of upload API calls allowed per month.</para>
        /// </summary>
        public sealed class Limit : UploadApiRateLimitValue
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Limit> Encoder = new LimitEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Limit> Decoder = new LimitDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Limit" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Limit(uint value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Limit" /> class.</para>
            /// </summary>
            private Limit()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public uint Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Limit" />.</para>
            /// </summary>
            private class LimitEncoder : enc.StructEncoder<Limit>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Limit value, enc.IJsonWriter writer)
                {
                    WriteProperty("limit", value.Value, writer, enc.UInt32Encoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Limit" />.</para>
            /// </summary>
            private class LimitDecoder : enc.StructDecoder<Limit>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Limit" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Limit Create()
                {
                    return new Limit();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Limit value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "limit":
                            value.Value = enc.UInt32Decoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : UploadApiRateLimitValue
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileProperties
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The properties search match object</para>
    /// </summary>
    public class PropertiesSearchMatch
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PropertiesSearchMatch> Encoder = new PropertiesSearchMatchEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PropertiesSearchMatch> Decoder = new PropertiesSearchMatchDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PropertiesSearchMatch" />
        /// class.</para>
        /// </summary>
        /// <param name="id">The ID for the matched file or folder.</param>
        /// <param name="path">The path for the matched file or folder.</param>
        /// <param name="isDeleted">Whether the file or folder is deleted.</param>
        /// <param name="propertyGroups">List of custom property groups associated with the
        /// file.</param>
        public PropertiesSearchMatch(string id,
                                     string path,
                                     bool isDeleted,
                                     col.IEnumerable<PropertyGroup> propertyGroups)
        {
            if (id == null)
            {
                throw new sys.ArgumentNullException("id");
            }
            if (id.Length < 1)
            {
                throw new sys.ArgumentOutOfRangeException("id", "Length should be at least 1");
            }

            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }

            var propertyGroupsList = enc.Util.ToList(propertyGroups);

            if (propertyGroups == null)
            {
                throw new sys.ArgumentNullException("propertyGroups");
            }

            this.Id = id;
            this.Path = path;
            this.IsDeleted = isDeleted;
            this.PropertyGroups = propertyGroupsList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PropertiesSearchMatch" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public PropertiesSearchMatch()
        {
        }

        /// <summary>
        /// <para>The ID for the matched file or folder.</para>
        /// </summary>
        public string Id { get; protected set; }

        /// <summary>
        /// <para>The path for the matched file or folder.</para>
        /// </summary>
        public string Path { get; protected set; }

        /// <summary>
        /// <para>Whether the file or folder is deleted.</para>
        /// </summary>
        public bool IsDeleted { get; protected set; }

        /// <summary>
        /// <para>List of custom property groups associated with the file.</para>
        /// </summary>
        public col.IList<PropertyGroup> PropertyGroups { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PropertiesSearchMatch" />.</para>
        /// </summary>
        private class PropertiesSearchMatchEncoder : enc.StructEncoder<PropertiesSearchMatch>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PropertiesSearchMatch value, enc.IJsonWriter writer)
            {
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("path", value.Path, writer, enc.StringEncoder.Instance);
                WriteProperty("is_deleted", value.IsDeleted, writer, enc.BooleanEncoder.Instance);
                WriteListProperty("property_groups", value.PropertyGroups, writer, global::Dropbox.Api.FileProperties.PropertyGroup.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PropertiesSearchMatch" />.</para>
        /// </summary>
        private class PropertiesSearchMatchDecoder : enc.StructDecoder<PropertiesSearchMatch>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PropertiesSearchMatch"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PropertiesSearchMatch Create()
            {
                return new PropertiesSearchMatch();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(PropertiesSearchMatch value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "path":
                        value.Path = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "is_deleted":
                        value.IsDeleted = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "property_groups":
                        value.PropertyGroups = ReadList<PropertyGroup>(reader, global::Dropbox.Api.FileProperties.PropertyGroup.Decoder);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

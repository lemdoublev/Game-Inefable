// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The list users on paper doc args object</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Paper.RefPaperDoc" />
    public class ListUsersOnPaperDocArgs : RefPaperDoc
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListUsersOnPaperDocArgs> Encoder = new ListUsersOnPaperDocArgsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListUsersOnPaperDocArgs> Decoder = new ListUsersOnPaperDocArgsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListUsersOnPaperDocArgs" />
        /// class.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="limit">Size limit per batch. The maximum number of users that can be
        /// retrieved per batch is 1000. Higher value results in invalid arguments
        /// error.</param>
        /// <param name="filterBy">Specify this attribute if you want to obtain users that have
        /// already accessed the Paper doc.</param>
        public ListUsersOnPaperDocArgs(string docId,
                                       int limit = 1000,
                                       UserOnPaperDocFilter filterBy = null)
            : base(docId)
        {
            if (limit < 1)
            {
                throw new sys.ArgumentOutOfRangeException("limit", "Value should be greater or equal than 1");
            }
            if (limit > 1000)
            {
                throw new sys.ArgumentOutOfRangeException("limit", "Value should be less of equal than 1000");
            }

            if (filterBy == null)
            {
                filterBy = global::Dropbox.Api.Paper.UserOnPaperDocFilter.Shared.Instance;
            }
            this.Limit = limit;
            this.FilterBy = filterBy;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListUsersOnPaperDocArgs" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public ListUsersOnPaperDocArgs()
        {
            this.Limit = 1000;
            this.FilterBy = global::Dropbox.Api.Paper.UserOnPaperDocFilter.Shared.Instance;
        }

        /// <summary>
        /// <para>Size limit per batch. The maximum number of users that can be retrieved per
        /// batch is 1000. Higher value results in invalid arguments error.</para>
        /// </summary>
        public int Limit { get; protected set; }

        /// <summary>
        /// <para>Specify this attribute if you want to obtain users that have already accessed
        /// the Paper doc.</para>
        /// </summary>
        public UserOnPaperDocFilter FilterBy { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListUsersOnPaperDocArgs" />.</para>
        /// </summary>
        private class ListUsersOnPaperDocArgsEncoder : enc.StructEncoder<ListUsersOnPaperDocArgs>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListUsersOnPaperDocArgs value, enc.IJsonWriter writer)
            {
                WriteProperty("doc_id", value.DocId, writer, enc.StringEncoder.Instance);
                WriteProperty("limit", value.Limit, writer, enc.Int32Encoder.Instance);
                WriteProperty("filter_by", value.FilterBy, writer, global::Dropbox.Api.Paper.UserOnPaperDocFilter.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListUsersOnPaperDocArgs" />.</para>
        /// </summary>
        private class ListUsersOnPaperDocArgsDecoder : enc.StructDecoder<ListUsersOnPaperDocArgs>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListUsersOnPaperDocArgs"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListUsersOnPaperDocArgs Create()
            {
                return new ListUsersOnPaperDocArgs();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListUsersOnPaperDocArgs value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "doc_id":
                        value.DocId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "limit":
                        value.Limit = enc.Int32Decoder.Instance.Decode(reader);
                        break;
                    case "filter_by":
                        value.FilterBy = global::Dropbox.Api.Paper.UserOnPaperDocFilter.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

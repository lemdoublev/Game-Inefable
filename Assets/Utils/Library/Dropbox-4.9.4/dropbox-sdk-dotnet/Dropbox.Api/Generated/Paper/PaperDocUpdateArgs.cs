// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper doc update args object</para>
    /// </summary>
    /// <seealso cref="Global::Dropbox.Api.Paper.RefPaperDoc" />
    public class PaperDocUpdateArgs : RefPaperDoc
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperDocUpdateArgs> Encoder = new PaperDocUpdateArgsEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperDocUpdateArgs> Decoder = new PaperDocUpdateArgsDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperDocUpdateArgs" />
        /// class.</para>
        /// </summary>
        /// <param name="docId">The Paper doc ID.</param>
        /// <param name="docUpdatePolicy">The policy used for the current update call.</param>
        /// <param name="revision">The latest doc revision. This value must match the head
        /// revision or an error code will be returned. This is to prevent colliding
        /// writes.</param>
        /// <param name="importFormat">The format of provided data.</param>
        public PaperDocUpdateArgs(string docId,
                                  PaperDocUpdatePolicy docUpdatePolicy,
                                  long revision,
                                  ImportFormat importFormat)
            : base(docId)
        {
            if (docUpdatePolicy == null)
            {
                throw new sys.ArgumentNullException("docUpdatePolicy");
            }

            if (importFormat == null)
            {
                throw new sys.ArgumentNullException("importFormat");
            }

            this.DocUpdatePolicy = docUpdatePolicy;
            this.Revision = revision;
            this.ImportFormat = importFormat;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperDocUpdateArgs" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public PaperDocUpdateArgs()
        {
        }

        /// <summary>
        /// <para>The policy used for the current update call.</para>
        /// </summary>
        public PaperDocUpdatePolicy DocUpdatePolicy { get; protected set; }

        /// <summary>
        /// <para>The latest doc revision. This value must match the head revision or an error
        /// code will be returned. This is to prevent colliding writes.</para>
        /// </summary>
        public long Revision { get; protected set; }

        /// <summary>
        /// <para>The format of provided data.</para>
        /// </summary>
        public ImportFormat ImportFormat { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperDocUpdateArgs" />.</para>
        /// </summary>
        private class PaperDocUpdateArgsEncoder : enc.StructEncoder<PaperDocUpdateArgs>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperDocUpdateArgs value, enc.IJsonWriter writer)
            {
                WriteProperty("doc_id", value.DocId, writer, enc.StringEncoder.Instance);
                WriteProperty("doc_update_policy", value.DocUpdatePolicy, writer, global::Dropbox.Api.Paper.PaperDocUpdatePolicy.Encoder);
                WriteProperty("revision", value.Revision, writer, enc.Int64Encoder.Instance);
                WriteProperty("import_format", value.ImportFormat, writer, global::Dropbox.Api.Paper.ImportFormat.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperDocUpdateArgs" />.</para>
        /// </summary>
        private class PaperDocUpdateArgsDecoder : enc.StructDecoder<PaperDocUpdateArgs>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperDocUpdateArgs" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperDocUpdateArgs Create()
            {
                return new PaperDocUpdateArgs();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(PaperDocUpdateArgs value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "doc_id":
                        value.DocId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "doc_update_policy":
                        value.DocUpdatePolicy = global::Dropbox.Api.Paper.PaperDocUpdatePolicy.Decoder.Decode(reader);
                        break;
                    case "revision":
                        value.Revision = enc.Int64Decoder.Instance.Decode(reader);
                        break;
                    case "import_format":
                        value.ImportFormat = global::Dropbox.Api.Paper.ImportFormat.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

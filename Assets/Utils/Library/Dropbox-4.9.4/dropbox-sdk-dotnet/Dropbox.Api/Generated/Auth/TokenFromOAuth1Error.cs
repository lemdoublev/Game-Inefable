// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Auth
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The token from o auth1 error object</para>
    /// </summary>
    public class TokenFromOAuth1Error
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TokenFromOAuth1Error> Encoder = new TokenFromOAuth1ErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TokenFromOAuth1Error> Decoder = new TokenFromOAuth1ErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TokenFromOAuth1Error" />
        /// class.</para>
        /// </summary>
        public TokenFromOAuth1Error()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InvalidOauth1TokenInfo</para>
        /// </summary>
        public bool IsInvalidOauth1TokenInfo
        {
            get
            {
                return this is InvalidOauth1TokenInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidOauth1TokenInfo, or <c>null</c>.</para>
        /// </summary>
        public InvalidOauth1TokenInfo AsInvalidOauth1TokenInfo
        {
            get
            {
                return this as InvalidOauth1TokenInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AppIdMismatch</para>
        /// </summary>
        public bool IsAppIdMismatch
        {
            get
            {
                return this is AppIdMismatch;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AppIdMismatch, or <c>null</c>.</para>
        /// </summary>
        public AppIdMismatch AsAppIdMismatch
        {
            get
            {
                return this as AppIdMismatch;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TokenFromOAuth1Error" />.</para>
        /// </summary>
        private class TokenFromOAuth1ErrorEncoder : enc.StructEncoder<TokenFromOAuth1Error>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TokenFromOAuth1Error value, enc.IJsonWriter writer)
            {
                if (value is InvalidOauth1TokenInfo)
                {
                    WriteProperty(".tag", "invalid_oauth1_token_info", writer, enc.StringEncoder.Instance);
                    InvalidOauth1TokenInfo.Encoder.EncodeFields((InvalidOauth1TokenInfo)value, writer);
                    return;
                }
                if (value is AppIdMismatch)
                {
                    WriteProperty(".tag", "app_id_mismatch", writer, enc.StringEncoder.Instance);
                    AppIdMismatch.Encoder.EncodeFields((AppIdMismatch)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TokenFromOAuth1Error" />.</para>
        /// </summary>
        private class TokenFromOAuth1ErrorDecoder : enc.UnionDecoder<TokenFromOAuth1Error>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TokenFromOAuth1Error" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TokenFromOAuth1Error Create()
            {
                return new TokenFromOAuth1Error();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TokenFromOAuth1Error Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "invalid_oauth1_token_info":
                        return InvalidOauth1TokenInfo.Decoder.DecodeFields(reader);
                    case "app_id_mismatch":
                        return AppIdMismatch.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Part or all of the OAuth 1.0 access token info is invalid.</para>
        /// </summary>
        public sealed class InvalidOauth1TokenInfo : TokenFromOAuth1Error
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidOauth1TokenInfo> Encoder = new InvalidOauth1TokenInfoEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidOauth1TokenInfo> Decoder = new InvalidOauth1TokenInfoDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidOauth1TokenInfo" />
            /// class.</para>
            /// </summary>
            private InvalidOauth1TokenInfo()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidOauth1TokenInfo</para>
            /// </summary>
            public static readonly InvalidOauth1TokenInfo Instance = new InvalidOauth1TokenInfo();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidOauth1TokenInfo" />.</para>
            /// </summary>
            private class InvalidOauth1TokenInfoEncoder : enc.StructEncoder<InvalidOauth1TokenInfo>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidOauth1TokenInfo value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidOauth1TokenInfo" />.</para>
            /// </summary>
            private class InvalidOauth1TokenInfoDecoder : enc.StructDecoder<InvalidOauth1TokenInfo>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidOauth1TokenInfo"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidOauth1TokenInfo Create()
                {
                    return InvalidOauth1TokenInfo.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The authorized app does not match the app associated with the supplied access
        /// token.</para>
        /// </summary>
        public sealed class AppIdMismatch : TokenFromOAuth1Error
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AppIdMismatch> Encoder = new AppIdMismatchEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AppIdMismatch> Decoder = new AppIdMismatchDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AppIdMismatch" />
            /// class.</para>
            /// </summary>
            private AppIdMismatch()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AppIdMismatch</para>
            /// </summary>
            public static readonly AppIdMismatch Instance = new AppIdMismatch();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AppIdMismatch" />.</para>
            /// </summary>
            private class AppIdMismatchEncoder : enc.StructEncoder<AppIdMismatch>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AppIdMismatch value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AppIdMismatch" />.</para>
            /// </summary>
            private class AppIdMismatchDecoder : enc.StructDecoder<AppIdMismatch>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AppIdMismatch" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AppIdMismatch Create()
                {
                    return AppIdMismatch.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : TokenFromOAuth1Error
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

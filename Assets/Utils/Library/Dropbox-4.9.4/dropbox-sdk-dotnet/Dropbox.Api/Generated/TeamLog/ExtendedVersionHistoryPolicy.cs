// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The extended version history policy object</para>
    /// </summary>
    public class ExtendedVersionHistoryPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ExtendedVersionHistoryPolicy> Encoder = new ExtendedVersionHistoryPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ExtendedVersionHistoryPolicy> Decoder = new ExtendedVersionHistoryPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ExtendedVersionHistoryPolicy" />
        /// class.</para>
        /// </summary>
        public ExtendedVersionHistoryPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ExplicitlyLimited</para>
        /// </summary>
        public bool IsExplicitlyLimited
        {
            get
            {
                return this is ExplicitlyLimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ExplicitlyLimited, or <c>null</c>.</para>
        /// </summary>
        public ExplicitlyLimited AsExplicitlyLimited
        {
            get
            {
                return this as ExplicitlyLimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ExplicitlyUnlimited</para>
        /// </summary>
        public bool IsExplicitlyUnlimited
        {
            get
            {
                return this is ExplicitlyUnlimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ExplicitlyUnlimited, or <c>null</c>.</para>
        /// </summary>
        public ExplicitlyUnlimited AsExplicitlyUnlimited
        {
            get
            {
                return this as ExplicitlyUnlimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ImplicitlyLimited</para>
        /// </summary>
        public bool IsImplicitlyLimited
        {
            get
            {
                return this is ImplicitlyLimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ImplicitlyLimited, or <c>null</c>.</para>
        /// </summary>
        public ImplicitlyLimited AsImplicitlyLimited
        {
            get
            {
                return this as ImplicitlyLimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ImplicitlyUnlimited</para>
        /// </summary>
        public bool IsImplicitlyUnlimited
        {
            get
            {
                return this is ImplicitlyUnlimited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ImplicitlyUnlimited, or <c>null</c>.</para>
        /// </summary>
        public ImplicitlyUnlimited AsImplicitlyUnlimited
        {
            get
            {
                return this as ImplicitlyUnlimited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ExtendedVersionHistoryPolicy" />.</para>
        /// </summary>
        private class ExtendedVersionHistoryPolicyEncoder : enc.StructEncoder<ExtendedVersionHistoryPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ExtendedVersionHistoryPolicy value, enc.IJsonWriter writer)
            {
                if (value is ExplicitlyLimited)
                {
                    WriteProperty(".tag", "explicitly_limited", writer, enc.StringEncoder.Instance);
                    ExplicitlyLimited.Encoder.EncodeFields((ExplicitlyLimited)value, writer);
                    return;
                }
                if (value is ExplicitlyUnlimited)
                {
                    WriteProperty(".tag", "explicitly_unlimited", writer, enc.StringEncoder.Instance);
                    ExplicitlyUnlimited.Encoder.EncodeFields((ExplicitlyUnlimited)value, writer);
                    return;
                }
                if (value is ImplicitlyLimited)
                {
                    WriteProperty(".tag", "implicitly_limited", writer, enc.StringEncoder.Instance);
                    ImplicitlyLimited.Encoder.EncodeFields((ImplicitlyLimited)value, writer);
                    return;
                }
                if (value is ImplicitlyUnlimited)
                {
                    WriteProperty(".tag", "implicitly_unlimited", writer, enc.StringEncoder.Instance);
                    ImplicitlyUnlimited.Encoder.EncodeFields((ImplicitlyUnlimited)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ExtendedVersionHistoryPolicy" />.</para>
        /// </summary>
        private class ExtendedVersionHistoryPolicyDecoder : enc.UnionDecoder<ExtendedVersionHistoryPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ExtendedVersionHistoryPolicy"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ExtendedVersionHistoryPolicy Create()
            {
                return new ExtendedVersionHistoryPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override ExtendedVersionHistoryPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "explicitly_limited":
                        return ExplicitlyLimited.Decoder.DecodeFields(reader);
                    case "explicitly_unlimited":
                        return ExplicitlyUnlimited.Decoder.DecodeFields(reader);
                    case "implicitly_limited":
                        return ImplicitlyLimited.Decoder.DecodeFields(reader);
                    case "implicitly_unlimited":
                        return ImplicitlyUnlimited.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The explicitly limited object</para>
        /// </summary>
        public sealed class ExplicitlyLimited : ExtendedVersionHistoryPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ExplicitlyLimited> Encoder = new ExplicitlyLimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ExplicitlyLimited> Decoder = new ExplicitlyLimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExplicitlyLimited" />
            /// class.</para>
            /// </summary>
            private ExplicitlyLimited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ExplicitlyLimited</para>
            /// </summary>
            public static readonly ExplicitlyLimited Instance = new ExplicitlyLimited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ExplicitlyLimited" />.</para>
            /// </summary>
            private class ExplicitlyLimitedEncoder : enc.StructEncoder<ExplicitlyLimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ExplicitlyLimited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ExplicitlyLimited" />.</para>
            /// </summary>
            private class ExplicitlyLimitedDecoder : enc.StructDecoder<ExplicitlyLimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ExplicitlyLimited"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ExplicitlyLimited Create()
                {
                    return ExplicitlyLimited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The explicitly unlimited object</para>
        /// </summary>
        public sealed class ExplicitlyUnlimited : ExtendedVersionHistoryPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ExplicitlyUnlimited> Encoder = new ExplicitlyUnlimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ExplicitlyUnlimited> Decoder = new ExplicitlyUnlimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ExplicitlyUnlimited" />
            /// class.</para>
            /// </summary>
            private ExplicitlyUnlimited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ExplicitlyUnlimited</para>
            /// </summary>
            public static readonly ExplicitlyUnlimited Instance = new ExplicitlyUnlimited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ExplicitlyUnlimited" />.</para>
            /// </summary>
            private class ExplicitlyUnlimitedEncoder : enc.StructEncoder<ExplicitlyUnlimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ExplicitlyUnlimited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ExplicitlyUnlimited" />.</para>
            /// </summary>
            private class ExplicitlyUnlimitedDecoder : enc.StructDecoder<ExplicitlyUnlimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ExplicitlyUnlimited"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ExplicitlyUnlimited Create()
                {
                    return ExplicitlyUnlimited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The implicitly limited object</para>
        /// </summary>
        public sealed class ImplicitlyLimited : ExtendedVersionHistoryPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ImplicitlyLimited> Encoder = new ImplicitlyLimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ImplicitlyLimited> Decoder = new ImplicitlyLimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ImplicitlyLimited" />
            /// class.</para>
            /// </summary>
            private ImplicitlyLimited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ImplicitlyLimited</para>
            /// </summary>
            public static readonly ImplicitlyLimited Instance = new ImplicitlyLimited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ImplicitlyLimited" />.</para>
            /// </summary>
            private class ImplicitlyLimitedEncoder : enc.StructEncoder<ImplicitlyLimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ImplicitlyLimited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ImplicitlyLimited" />.</para>
            /// </summary>
            private class ImplicitlyLimitedDecoder : enc.StructDecoder<ImplicitlyLimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ImplicitlyLimited"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ImplicitlyLimited Create()
                {
                    return ImplicitlyLimited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The implicitly unlimited object</para>
        /// </summary>
        public sealed class ImplicitlyUnlimited : ExtendedVersionHistoryPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<ImplicitlyUnlimited> Encoder = new ImplicitlyUnlimitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<ImplicitlyUnlimited> Decoder = new ImplicitlyUnlimitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ImplicitlyUnlimited" />
            /// class.</para>
            /// </summary>
            private ImplicitlyUnlimited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of ImplicitlyUnlimited</para>
            /// </summary>
            public static readonly ImplicitlyUnlimited Instance = new ImplicitlyUnlimited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="ImplicitlyUnlimited" />.</para>
            /// </summary>
            private class ImplicitlyUnlimitedEncoder : enc.StructEncoder<ImplicitlyUnlimited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(ImplicitlyUnlimited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="ImplicitlyUnlimited" />.</para>
            /// </summary>
            private class ImplicitlyUnlimitedDecoder : enc.StructDecoder<ImplicitlyUnlimited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="ImplicitlyUnlimited"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override ImplicitlyUnlimited Create()
                {
                    return ImplicitlyUnlimited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : ExtendedVersionHistoryPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

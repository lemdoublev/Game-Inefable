// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for controlling if team members can share Paper documents
    /// externally.</para>
    /// </summary>
    public class PaperMemberPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperMemberPolicy> Encoder = new PaperMemberPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperMemberPolicy> Decoder = new PaperMemberPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperMemberPolicy" />
        /// class.</para>
        /// </summary>
        public PaperMemberPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AnyoneWithLink</para>
        /// </summary>
        public bool IsAnyoneWithLink
        {
            get
            {
                return this is AnyoneWithLink;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AnyoneWithLink, or <c>null</c>.</para>
        /// </summary>
        public AnyoneWithLink AsAnyoneWithLink
        {
            get
            {
                return this as AnyoneWithLink;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is OnlyTeam</para>
        /// </summary>
        public bool IsOnlyTeam
        {
            get
            {
                return this is OnlyTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a OnlyTeam, or <c>null</c>.</para>
        /// </summary>
        public OnlyTeam AsOnlyTeam
        {
            get
            {
                return this as OnlyTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TeamAndExplicitlyShared</para>
        /// </summary>
        public bool IsTeamAndExplicitlyShared
        {
            get
            {
                return this is TeamAndExplicitlyShared;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamAndExplicitlyShared, or <c>null</c>.</para>
        /// </summary>
        public TeamAndExplicitlyShared AsTeamAndExplicitlyShared
        {
            get
            {
                return this as TeamAndExplicitlyShared;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperMemberPolicy" />.</para>
        /// </summary>
        private class PaperMemberPolicyEncoder : enc.StructEncoder<PaperMemberPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperMemberPolicy value, enc.IJsonWriter writer)
            {
                if (value is AnyoneWithLink)
                {
                    WriteProperty(".tag", "anyone_with_link", writer, enc.StringEncoder.Instance);
                    AnyoneWithLink.Encoder.EncodeFields((AnyoneWithLink)value, writer);
                    return;
                }
                if (value is OnlyTeam)
                {
                    WriteProperty(".tag", "only_team", writer, enc.StringEncoder.Instance);
                    OnlyTeam.Encoder.EncodeFields((OnlyTeam)value, writer);
                    return;
                }
                if (value is TeamAndExplicitlyShared)
                {
                    WriteProperty(".tag", "team_and_explicitly_shared", writer, enc.StringEncoder.Instance);
                    TeamAndExplicitlyShared.Encoder.EncodeFields((TeamAndExplicitlyShared)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperMemberPolicy" />.</para>
        /// </summary>
        private class PaperMemberPolicyDecoder : enc.UnionDecoder<PaperMemberPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperMemberPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperMemberPolicy Create()
            {
                return new PaperMemberPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperMemberPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "anyone_with_link":
                        return AnyoneWithLink.Decoder.DecodeFields(reader);
                    case "only_team":
                        return OnlyTeam.Decoder.DecodeFields(reader);
                    case "team_and_explicitly_shared":
                        return TeamAndExplicitlyShared.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The anyone with link object</para>
        /// </summary>
        public sealed class AnyoneWithLink : PaperMemberPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AnyoneWithLink> Encoder = new AnyoneWithLinkEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AnyoneWithLink> Decoder = new AnyoneWithLinkDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AnyoneWithLink" />
            /// class.</para>
            /// </summary>
            private AnyoneWithLink()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AnyoneWithLink</para>
            /// </summary>
            public static readonly AnyoneWithLink Instance = new AnyoneWithLink();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AnyoneWithLink" />.</para>
            /// </summary>
            private class AnyoneWithLinkEncoder : enc.StructEncoder<AnyoneWithLink>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AnyoneWithLink value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AnyoneWithLink" />.</para>
            /// </summary>
            private class AnyoneWithLinkDecoder : enc.StructDecoder<AnyoneWithLink>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AnyoneWithLink" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AnyoneWithLink Create()
                {
                    return AnyoneWithLink.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The only team object</para>
        /// </summary>
        public sealed class OnlyTeam : PaperMemberPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<OnlyTeam> Encoder = new OnlyTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<OnlyTeam> Decoder = new OnlyTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="OnlyTeam" /> class.</para>
            /// </summary>
            private OnlyTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of OnlyTeam</para>
            /// </summary>
            public static readonly OnlyTeam Instance = new OnlyTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="OnlyTeam" />.</para>
            /// </summary>
            private class OnlyTeamEncoder : enc.StructEncoder<OnlyTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(OnlyTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="OnlyTeam" />.</para>
            /// </summary>
            private class OnlyTeamDecoder : enc.StructDecoder<OnlyTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="OnlyTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override OnlyTeam Create()
                {
                    return OnlyTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The team and explicitly shared object</para>
        /// </summary>
        public sealed class TeamAndExplicitlyShared : PaperMemberPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TeamAndExplicitlyShared> Encoder = new TeamAndExplicitlySharedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TeamAndExplicitlyShared> Decoder = new TeamAndExplicitlySharedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamAndExplicitlyShared" />
            /// class.</para>
            /// </summary>
            private TeamAndExplicitlyShared()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamAndExplicitlyShared</para>
            /// </summary>
            public static readonly TeamAndExplicitlyShared Instance = new TeamAndExplicitlyShared();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TeamAndExplicitlyShared" />.</para>
            /// </summary>
            private class TeamAndExplicitlySharedEncoder : enc.StructEncoder<TeamAndExplicitlyShared>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TeamAndExplicitlyShared value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TeamAndExplicitlyShared" />.</para>
            /// </summary>
            private class TeamAndExplicitlySharedDecoder : enc.StructDecoder<TeamAndExplicitlyShared>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TeamAndExplicitlyShared"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TeamAndExplicitlyShared Create()
                {
                    return TeamAndExplicitlyShared.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperMemberPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Shared link access level.</para>
    /// </summary>
    public class SharedLinkAccessLevel
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedLinkAccessLevel> Encoder = new SharedLinkAccessLevelEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedLinkAccessLevel> Decoder = new SharedLinkAccessLevelDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedLinkAccessLevel" />
        /// class.</para>
        /// </summary>
        public SharedLinkAccessLevel()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is None</para>
        /// </summary>
        public bool IsNone
        {
            get
            {
                return this is None;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a None, or <c>null</c>.</para>
        /// </summary>
        public None AsNone
        {
            get
            {
                return this as None;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Reader</para>
        /// </summary>
        public bool IsReader
        {
            get
            {
                return this is Reader;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Reader, or <c>null</c>.</para>
        /// </summary>
        public Reader AsReader
        {
            get
            {
                return this as Reader;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Writer</para>
        /// </summary>
        public bool IsWriter
        {
            get
            {
                return this is Writer;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Writer, or <c>null</c>.</para>
        /// </summary>
        public Writer AsWriter
        {
            get
            {
                return this as Writer;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedLinkAccessLevel" />.</para>
        /// </summary>
        private class SharedLinkAccessLevelEncoder : enc.StructEncoder<SharedLinkAccessLevel>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedLinkAccessLevel value, enc.IJsonWriter writer)
            {
                if (value is None)
                {
                    WriteProperty(".tag", "none", writer, enc.StringEncoder.Instance);
                    None.Encoder.EncodeFields((None)value, writer);
                    return;
                }
                if (value is Reader)
                {
                    WriteProperty(".tag", "reader", writer, enc.StringEncoder.Instance);
                    Reader.Encoder.EncodeFields((Reader)value, writer);
                    return;
                }
                if (value is Writer)
                {
                    WriteProperty(".tag", "writer", writer, enc.StringEncoder.Instance);
                    Writer.Encoder.EncodeFields((Writer)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedLinkAccessLevel" />.</para>
        /// </summary>
        private class SharedLinkAccessLevelDecoder : enc.UnionDecoder<SharedLinkAccessLevel>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedLinkAccessLevel"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedLinkAccessLevel Create()
            {
                return new SharedLinkAccessLevel();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharedLinkAccessLevel Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "none":
                        return None.Decoder.DecodeFields(reader);
                    case "reader":
                        return Reader.Decoder.DecodeFields(reader);
                    case "writer":
                        return Writer.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The none object</para>
        /// </summary>
        public sealed class None : SharedLinkAccessLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<None> Encoder = new NoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<None> Decoder = new NoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="None" /> class.</para>
            /// </summary>
            private None()
            {
            }

            /// <summary>
            /// <para>A singleton instance of None</para>
            /// </summary>
            public static readonly None Instance = new None();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="None" />.</para>
            /// </summary>
            private class NoneEncoder : enc.StructEncoder<None>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(None value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="None" />.</para>
            /// </summary>
            private class NoneDecoder : enc.StructDecoder<None>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="None" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override None Create()
                {
                    return None.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The reader object</para>
        /// </summary>
        public sealed class Reader : SharedLinkAccessLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Reader> Encoder = new ReaderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Reader> Decoder = new ReaderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Reader" /> class.</para>
            /// </summary>
            private Reader()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Reader</para>
            /// </summary>
            public static readonly Reader Instance = new Reader();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Reader" />.</para>
            /// </summary>
            private class ReaderEncoder : enc.StructEncoder<Reader>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Reader value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Reader" />.</para>
            /// </summary>
            private class ReaderDecoder : enc.StructDecoder<Reader>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Reader" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Reader Create()
                {
                    return Reader.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The writer object</para>
        /// </summary>
        public sealed class Writer : SharedLinkAccessLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Writer> Encoder = new WriterEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Writer> Decoder = new WriterDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Writer" /> class.</para>
            /// </summary>
            private Writer()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Writer</para>
            /// </summary>
            public static readonly Writer Instance = new Writer();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Writer" />.</para>
            /// </summary>
            private class WriterEncoder : enc.StructEncoder<Writer>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Writer value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Writer" />.</para>
            /// </summary>
            private class WriterDecoder : enc.StructDecoder<Writer>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Writer" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Writer Create()
                {
                    return Writer.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SharedLinkAccessLevel
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

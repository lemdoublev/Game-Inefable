// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The group join policy object</para>
    /// </summary>
    public class GroupJoinPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GroupJoinPolicy> Encoder = new GroupJoinPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GroupJoinPolicy> Decoder = new GroupJoinPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GroupJoinPolicy" />
        /// class.</para>
        /// </summary>
        public GroupJoinPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Open</para>
        /// </summary>
        public bool IsOpen
        {
            get
            {
                return this is Open;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Open, or <c>null</c>.</para>
        /// </summary>
        public Open AsOpen
        {
            get
            {
                return this as Open;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RequestToJoin</para>
        /// </summary>
        public bool IsRequestToJoin
        {
            get
            {
                return this is RequestToJoin;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RequestToJoin, or <c>null</c>.</para>
        /// </summary>
        public RequestToJoin AsRequestToJoin
        {
            get
            {
                return this as RequestToJoin;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GroupJoinPolicy" />.</para>
        /// </summary>
        private class GroupJoinPolicyEncoder : enc.StructEncoder<GroupJoinPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GroupJoinPolicy value, enc.IJsonWriter writer)
            {
                if (value is Open)
                {
                    WriteProperty(".tag", "open", writer, enc.StringEncoder.Instance);
                    Open.Encoder.EncodeFields((Open)value, writer);
                    return;
                }
                if (value is RequestToJoin)
                {
                    WriteProperty(".tag", "request_to_join", writer, enc.StringEncoder.Instance);
                    RequestToJoin.Encoder.EncodeFields((RequestToJoin)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GroupJoinPolicy" />.</para>
        /// </summary>
        private class GroupJoinPolicyDecoder : enc.UnionDecoder<GroupJoinPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GroupJoinPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GroupJoinPolicy Create()
            {
                return new GroupJoinPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GroupJoinPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "open":
                        return Open.Decoder.DecodeFields(reader);
                    case "request_to_join":
                        return RequestToJoin.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The open object</para>
        /// </summary>
        public sealed class Open : GroupJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Open> Encoder = new OpenEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Open> Decoder = new OpenDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Open" /> class.</para>
            /// </summary>
            private Open()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Open</para>
            /// </summary>
            public static readonly Open Instance = new Open();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Open" />.</para>
            /// </summary>
            private class OpenEncoder : enc.StructEncoder<Open>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Open value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Open" />.</para>
            /// </summary>
            private class OpenDecoder : enc.StructDecoder<Open>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Open" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Open Create()
                {
                    return Open.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The request to join object</para>
        /// </summary>
        public sealed class RequestToJoin : GroupJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RequestToJoin> Encoder = new RequestToJoinEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RequestToJoin> Decoder = new RequestToJoinDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RequestToJoin" />
            /// class.</para>
            /// </summary>
            private RequestToJoin()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RequestToJoin</para>
            /// </summary>
            public static readonly RequestToJoin Instance = new RequestToJoin();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RequestToJoin" />.</para>
            /// </summary>
            private class RequestToJoinEncoder : enc.StructEncoder<RequestToJoin>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RequestToJoin value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RequestToJoin" />.</para>
            /// </summary>
            private class RequestToJoinDecoder : enc.StructDecoder<RequestToJoin>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RequestToJoin" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RequestToJoin Create()
                {
                    return RequestToJoin.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : GroupJoinPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

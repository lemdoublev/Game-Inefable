// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Geographic location details.</para>
    /// </summary>
    public class GeoLocationLogInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GeoLocationLogInfo> Encoder = new GeoLocationLogInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GeoLocationLogInfo> Decoder = new GeoLocationLogInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GeoLocationLogInfo" />
        /// class.</para>
        /// </summary>
        /// <param name="ipAddress">IP address.</param>
        /// <param name="city">City name.</param>
        /// <param name="region">Region name.</param>
        /// <param name="country">Country code.</param>
        public GeoLocationLogInfo(string ipAddress,
                                  string city = null,
                                  string region = null,
                                  string country = null)
        {
            if (ipAddress == null)
            {
                throw new sys.ArgumentNullException("ipAddress");
            }

            this.IpAddress = ipAddress;
            this.City = city;
            this.Region = region;
            this.Country = country;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GeoLocationLogInfo" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public GeoLocationLogInfo()
        {
        }

        /// <summary>
        /// <para>IP address.</para>
        /// </summary>
        public string IpAddress { get; protected set; }

        /// <summary>
        /// <para>City name.</para>
        /// </summary>
        public string City { get; protected set; }

        /// <summary>
        /// <para>Region name.</para>
        /// </summary>
        public string Region { get; protected set; }

        /// <summary>
        /// <para>Country code.</para>
        /// </summary>
        public string Country { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GeoLocationLogInfo" />.</para>
        /// </summary>
        private class GeoLocationLogInfoEncoder : enc.StructEncoder<GeoLocationLogInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GeoLocationLogInfo value, enc.IJsonWriter writer)
            {
                WriteProperty("ip_address", value.IpAddress, writer, enc.StringEncoder.Instance);
                if (value.City != null)
                {
                    WriteProperty("city", value.City, writer, enc.StringEncoder.Instance);
                }
                if (value.Region != null)
                {
                    WriteProperty("region", value.Region, writer, enc.StringEncoder.Instance);
                }
                if (value.Country != null)
                {
                    WriteProperty("country", value.Country, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GeoLocationLogInfo" />.</para>
        /// </summary>
        private class GeoLocationLogInfoDecoder : enc.StructDecoder<GeoLocationLogInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GeoLocationLogInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GeoLocationLogInfo Create()
            {
                return new GeoLocationLogInfo();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(GeoLocationLogInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "ip_address":
                        value.IpAddress = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "city":
                        value.City = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "region":
                        value.Region = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "country":
                        value.Country = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

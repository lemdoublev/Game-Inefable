// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Certificate details.</para>
    /// </summary>
    /// <seealso cref="SsoAddCertDetails" />
    /// <seealso cref="SsoChangeCertDetails" />
    public class Certificate
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<Certificate> Encoder = new CertificateEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<Certificate> Decoder = new CertificateDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Certificate" /> class.</para>
        /// </summary>
        /// <param name="subject">Certificate subject.</param>
        /// <param name="issuer">Certificate issuer.</param>
        /// <param name="issueDate">Certificate issue date.</param>
        /// <param name="expirationDate">Certificate expiration date.</param>
        /// <param name="serialNumber">Certificate serial number.</param>
        /// <param name="sha1Fingerprint">Certificate sha1 fingerprint.</param>
        /// <param name="commonName">Certificate common name.</param>
        public Certificate(string subject,
                           string issuer,
                           string issueDate,
                           string expirationDate,
                           string serialNumber,
                           string sha1Fingerprint,
                           string commonName = null)
        {
            if (subject == null)
            {
                throw new sys.ArgumentNullException("subject");
            }

            if (issuer == null)
            {
                throw new sys.ArgumentNullException("issuer");
            }

            if (issueDate == null)
            {
                throw new sys.ArgumentNullException("issueDate");
            }

            if (expirationDate == null)
            {
                throw new sys.ArgumentNullException("expirationDate");
            }

            if (serialNumber == null)
            {
                throw new sys.ArgumentNullException("serialNumber");
            }

            if (sha1Fingerprint == null)
            {
                throw new sys.ArgumentNullException("sha1Fingerprint");
            }

            this.Subject = subject;
            this.Issuer = issuer;
            this.IssueDate = issueDate;
            this.ExpirationDate = expirationDate;
            this.SerialNumber = serialNumber;
            this.Sha1Fingerprint = sha1Fingerprint;
            this.CommonName = commonName;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Certificate" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public Certificate()
        {
        }

        /// <summary>
        /// <para>Certificate subject.</para>
        /// </summary>
        public string Subject { get; protected set; }

        /// <summary>
        /// <para>Certificate issuer.</para>
        /// </summary>
        public string Issuer { get; protected set; }

        /// <summary>
        /// <para>Certificate issue date.</para>
        /// </summary>
        public string IssueDate { get; protected set; }

        /// <summary>
        /// <para>Certificate expiration date.</para>
        /// </summary>
        public string ExpirationDate { get; protected set; }

        /// <summary>
        /// <para>Certificate serial number.</para>
        /// </summary>
        public string SerialNumber { get; protected set; }

        /// <summary>
        /// <para>Certificate sha1 fingerprint.</para>
        /// </summary>
        public string Sha1Fingerprint { get; protected set; }

        /// <summary>
        /// <para>Certificate common name.</para>
        /// </summary>
        public string CommonName { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="Certificate" />.</para>
        /// </summary>
        private class CertificateEncoder : enc.StructEncoder<Certificate>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(Certificate value, enc.IJsonWriter writer)
            {
                WriteProperty("subject", value.Subject, writer, enc.StringEncoder.Instance);
                WriteProperty("issuer", value.Issuer, writer, enc.StringEncoder.Instance);
                WriteProperty("issue_date", value.IssueDate, writer, enc.StringEncoder.Instance);
                WriteProperty("expiration_date", value.ExpirationDate, writer, enc.StringEncoder.Instance);
                WriteProperty("serial_number", value.SerialNumber, writer, enc.StringEncoder.Instance);
                WriteProperty("sha1_fingerprint", value.Sha1Fingerprint, writer, enc.StringEncoder.Instance);
                if (value.CommonName != null)
                {
                    WriteProperty("common_name", value.CommonName, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="Certificate" />.</para>
        /// </summary>
        private class CertificateDecoder : enc.StructDecoder<Certificate>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="Certificate" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override Certificate Create()
            {
                return new Certificate();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(Certificate value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "subject":
                        value.Subject = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "issuer":
                        value.Issuer = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "issue_date":
                        value.IssueDate = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "expiration_date":
                        value.ExpirationDate = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "serial_number":
                        value.SerialNumber = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "sha1_fingerprint":
                        value.Sha1Fingerprint = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "common_name":
                        value.CommonName = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

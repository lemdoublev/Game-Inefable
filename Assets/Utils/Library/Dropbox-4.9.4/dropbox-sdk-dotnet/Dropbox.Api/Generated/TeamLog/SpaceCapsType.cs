// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Space limit alert policy</para>
    /// </summary>
    public class SpaceCapsType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SpaceCapsType> Encoder = new SpaceCapsTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SpaceCapsType> Decoder = new SpaceCapsTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SpaceCapsType" /> class.</para>
        /// </summary>
        public SpaceCapsType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Hard</para>
        /// </summary>
        public bool IsHard
        {
            get
            {
                return this is Hard;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Hard, or <c>null</c>.</para>
        /// </summary>
        public Hard AsHard
        {
            get
            {
                return this as Hard;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Off</para>
        /// </summary>
        public bool IsOff
        {
            get
            {
                return this is Off;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Off, or <c>null</c>.</para>
        /// </summary>
        public Off AsOff
        {
            get
            {
                return this as Off;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Soft</para>
        /// </summary>
        public bool IsSoft
        {
            get
            {
                return this is Soft;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Soft, or <c>null</c>.</para>
        /// </summary>
        public Soft AsSoft
        {
            get
            {
                return this as Soft;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SpaceCapsType" />.</para>
        /// </summary>
        private class SpaceCapsTypeEncoder : enc.StructEncoder<SpaceCapsType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SpaceCapsType value, enc.IJsonWriter writer)
            {
                if (value is Hard)
                {
                    WriteProperty(".tag", "hard", writer, enc.StringEncoder.Instance);
                    Hard.Encoder.EncodeFields((Hard)value, writer);
                    return;
                }
                if (value is Off)
                {
                    WriteProperty(".tag", "off", writer, enc.StringEncoder.Instance);
                    Off.Encoder.EncodeFields((Off)value, writer);
                    return;
                }
                if (value is Soft)
                {
                    WriteProperty(".tag", "soft", writer, enc.StringEncoder.Instance);
                    Soft.Encoder.EncodeFields((Soft)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SpaceCapsType" />.</para>
        /// </summary>
        private class SpaceCapsTypeDecoder : enc.UnionDecoder<SpaceCapsType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SpaceCapsType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SpaceCapsType Create()
            {
                return new SpaceCapsType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SpaceCapsType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "hard":
                        return Hard.Decoder.DecodeFields(reader);
                    case "off":
                        return Off.Decoder.DecodeFields(reader);
                    case "soft":
                        return Soft.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The hard object</para>
        /// </summary>
        public sealed class Hard : SpaceCapsType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Hard> Encoder = new HardEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Hard> Decoder = new HardDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Hard" /> class.</para>
            /// </summary>
            private Hard()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Hard</para>
            /// </summary>
            public static readonly Hard Instance = new Hard();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Hard" />.</para>
            /// </summary>
            private class HardEncoder : enc.StructEncoder<Hard>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Hard value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Hard" />.</para>
            /// </summary>
            private class HardDecoder : enc.StructDecoder<Hard>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Hard" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Hard Create()
                {
                    return Hard.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The off object</para>
        /// </summary>
        public sealed class Off : SpaceCapsType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Off> Encoder = new OffEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Off> Decoder = new OffDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Off" /> class.</para>
            /// </summary>
            private Off()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Off</para>
            /// </summary>
            public static readonly Off Instance = new Off();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffEncoder : enc.StructEncoder<Off>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Off value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Off" />.</para>
            /// </summary>
            private class OffDecoder : enc.StructDecoder<Off>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Off" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Off Create()
                {
                    return Off.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The soft object</para>
        /// </summary>
        public sealed class Soft : SpaceCapsType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Soft> Encoder = new SoftEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Soft> Decoder = new SoftDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Soft" /> class.</para>
            /// </summary>
            private Soft()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Soft</para>
            /// </summary>
            public static readonly Soft Instance = new Soft();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Soft" />.</para>
            /// </summary>
            private class SoftEncoder : enc.StructEncoder<Soft>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Soft value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Soft" />.</para>
            /// </summary>
            private class SoftDecoder : enc.StructDecoder<Soft>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Soft" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Soft Create()
                {
                    return Soft.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : SpaceCapsType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

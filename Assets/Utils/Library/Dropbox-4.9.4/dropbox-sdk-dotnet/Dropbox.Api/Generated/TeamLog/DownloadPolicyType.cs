// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Shared content downloads policy</para>
    /// </summary>
    public class DownloadPolicyType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<DownloadPolicyType> Encoder = new DownloadPolicyTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<DownloadPolicyType> Decoder = new DownloadPolicyTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="DownloadPolicyType" />
        /// class.</para>
        /// </summary>
        public DownloadPolicyType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Allow</para>
        /// </summary>
        public bool IsAllow
        {
            get
            {
                return this is Allow;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Allow, or <c>null</c>.</para>
        /// </summary>
        public Allow AsAllow
        {
            get
            {
                return this as Allow;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Disallow</para>
        /// </summary>
        public bool IsDisallow
        {
            get
            {
                return this is Disallow;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Disallow, or <c>null</c>.</para>
        /// </summary>
        public Disallow AsDisallow
        {
            get
            {
                return this as Disallow;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="DownloadPolicyType" />.</para>
        /// </summary>
        private class DownloadPolicyTypeEncoder : enc.StructEncoder<DownloadPolicyType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(DownloadPolicyType value, enc.IJsonWriter writer)
            {
                if (value is Allow)
                {
                    WriteProperty(".tag", "allow", writer, enc.StringEncoder.Instance);
                    Allow.Encoder.EncodeFields((Allow)value, writer);
                    return;
                }
                if (value is Disallow)
                {
                    WriteProperty(".tag", "disallow", writer, enc.StringEncoder.Instance);
                    Disallow.Encoder.EncodeFields((Disallow)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="DownloadPolicyType" />.</para>
        /// </summary>
        private class DownloadPolicyTypeDecoder : enc.UnionDecoder<DownloadPolicyType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="DownloadPolicyType" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override DownloadPolicyType Create()
            {
                return new DownloadPolicyType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override DownloadPolicyType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "allow":
                        return Allow.Decoder.DecodeFields(reader);
                    case "disallow":
                        return Disallow.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The allow object</para>
        /// </summary>
        public sealed class Allow : DownloadPolicyType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Allow> Encoder = new AllowEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Allow> Decoder = new AllowDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Allow" /> class.</para>
            /// </summary>
            private Allow()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Allow</para>
            /// </summary>
            public static readonly Allow Instance = new Allow();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Allow" />.</para>
            /// </summary>
            private class AllowEncoder : enc.StructEncoder<Allow>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Allow value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Allow" />.</para>
            /// </summary>
            private class AllowDecoder : enc.StructDecoder<Allow>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Allow" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Allow Create()
                {
                    return Allow.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The disallow object</para>
        /// </summary>
        public sealed class Disallow : DownloadPolicyType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Disallow> Encoder = new DisallowEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Disallow> Decoder = new DisallowDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Disallow" /> class.</para>
            /// </summary>
            private Disallow()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Disallow</para>
            /// </summary>
            public static readonly Disallow Instance = new Disallow();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Disallow" />.</para>
            /// </summary>
            private class DisallowEncoder : enc.StructEncoder<Disallow>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Disallow value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Disallow" />.</para>
            /// </summary>
            private class DisallowDecoder : enc.StructDecoder<Disallow>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Disallow" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Disallow Create()
                {
                    return Disallow.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : DownloadPolicyType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The login method object</para>
    /// </summary>
    public class LoginMethod
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LoginMethod> Encoder = new LoginMethodEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LoginMethod> Decoder = new LoginMethodDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LoginMethod" /> class.</para>
        /// </summary>
        public LoginMethod()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Password</para>
        /// </summary>
        public bool IsPassword
        {
            get
            {
                return this is Password;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Password, or <c>null</c>.</para>
        /// </summary>
        public Password AsPassword
        {
            get
            {
                return this as Password;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TwoFactorAuthentication</para>
        /// </summary>
        public bool IsTwoFactorAuthentication
        {
            get
            {
                return this is TwoFactorAuthentication;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TwoFactorAuthentication, or <c>null</c>.</para>
        /// </summary>
        public TwoFactorAuthentication AsTwoFactorAuthentication
        {
            get
            {
                return this as TwoFactorAuthentication;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Saml</para>
        /// </summary>
        public bool IsSaml
        {
            get
            {
                return this is Saml;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Saml, or <c>null</c>.</para>
        /// </summary>
        public Saml AsSaml
        {
            get
            {
                return this as Saml;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is GoogleOauth</para>
        /// </summary>
        public bool IsGoogleOauth
        {
            get
            {
                return this is GoogleOauth;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a GoogleOauth, or <c>null</c>.</para>
        /// </summary>
        public GoogleOauth AsGoogleOauth
        {
            get
            {
                return this as GoogleOauth;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LoginMethod" />.</para>
        /// </summary>
        private class LoginMethodEncoder : enc.StructEncoder<LoginMethod>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LoginMethod value, enc.IJsonWriter writer)
            {
                if (value is Password)
                {
                    WriteProperty(".tag", "password", writer, enc.StringEncoder.Instance);
                    Password.Encoder.EncodeFields((Password)value, writer);
                    return;
                }
                if (value is TwoFactorAuthentication)
                {
                    WriteProperty(".tag", "two_factor_authentication", writer, enc.StringEncoder.Instance);
                    TwoFactorAuthentication.Encoder.EncodeFields((TwoFactorAuthentication)value, writer);
                    return;
                }
                if (value is Saml)
                {
                    WriteProperty(".tag", "saml", writer, enc.StringEncoder.Instance);
                    Saml.Encoder.EncodeFields((Saml)value, writer);
                    return;
                }
                if (value is GoogleOauth)
                {
                    WriteProperty(".tag", "google_oauth", writer, enc.StringEncoder.Instance);
                    GoogleOauth.Encoder.EncodeFields((GoogleOauth)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LoginMethod" />.</para>
        /// </summary>
        private class LoginMethodDecoder : enc.UnionDecoder<LoginMethod>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LoginMethod" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LoginMethod Create()
            {
                return new LoginMethod();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LoginMethod Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "password":
                        return Password.Decoder.DecodeFields(reader);
                    case "two_factor_authentication":
                        return TwoFactorAuthentication.Decoder.DecodeFields(reader);
                    case "saml":
                        return Saml.Decoder.DecodeFields(reader);
                    case "google_oauth":
                        return GoogleOauth.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The password object</para>
        /// </summary>
        public sealed class Password : LoginMethod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Password> Encoder = new PasswordEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Password> Decoder = new PasswordDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Password" /> class.</para>
            /// </summary>
            private Password()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Password</para>
            /// </summary>
            public static readonly Password Instance = new Password();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Password" />.</para>
            /// </summary>
            private class PasswordEncoder : enc.StructEncoder<Password>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Password value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Password" />.</para>
            /// </summary>
            private class PasswordDecoder : enc.StructDecoder<Password>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Password" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Password Create()
                {
                    return Password.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The two factor authentication object</para>
        /// </summary>
        public sealed class TwoFactorAuthentication : LoginMethod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TwoFactorAuthentication> Encoder = new TwoFactorAuthenticationEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TwoFactorAuthentication> Decoder = new TwoFactorAuthenticationDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TwoFactorAuthentication" />
            /// class.</para>
            /// </summary>
            private TwoFactorAuthentication()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TwoFactorAuthentication</para>
            /// </summary>
            public static readonly TwoFactorAuthentication Instance = new TwoFactorAuthentication();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TwoFactorAuthentication" />.</para>
            /// </summary>
            private class TwoFactorAuthenticationEncoder : enc.StructEncoder<TwoFactorAuthentication>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TwoFactorAuthentication value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TwoFactorAuthentication" />.</para>
            /// </summary>
            private class TwoFactorAuthenticationDecoder : enc.StructDecoder<TwoFactorAuthentication>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TwoFactorAuthentication"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TwoFactorAuthentication Create()
                {
                    return TwoFactorAuthentication.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The saml object</para>
        /// </summary>
        public sealed class Saml : LoginMethod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Saml> Encoder = new SamlEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Saml> Decoder = new SamlDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Saml" /> class.</para>
            /// </summary>
            private Saml()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Saml</para>
            /// </summary>
            public static readonly Saml Instance = new Saml();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Saml" />.</para>
            /// </summary>
            private class SamlEncoder : enc.StructEncoder<Saml>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Saml value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Saml" />.</para>
            /// </summary>
            private class SamlDecoder : enc.StructDecoder<Saml>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Saml" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Saml Create()
                {
                    return Saml.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The google oauth object</para>
        /// </summary>
        public sealed class GoogleOauth : LoginMethod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<GoogleOauth> Encoder = new GoogleOauthEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<GoogleOauth> Decoder = new GoogleOauthDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="GoogleOauth" />
            /// class.</para>
            /// </summary>
            private GoogleOauth()
            {
            }

            /// <summary>
            /// <para>A singleton instance of GoogleOauth</para>
            /// </summary>
            public static readonly GoogleOauth Instance = new GoogleOauth();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="GoogleOauth" />.</para>
            /// </summary>
            private class GoogleOauthEncoder : enc.StructEncoder<GoogleOauth>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(GoogleOauth value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="GoogleOauth" />.</para>
            /// </summary>
            private class GoogleOauthDecoder : enc.StructDecoder<GoogleOauth>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="GoogleOauth" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override GoogleOauth Create()
                {
                    return GoogleOauth.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LoginMethod
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

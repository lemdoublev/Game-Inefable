// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileProperties
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The invalid property group error object</para>
    /// </summary>
    public class InvalidPropertyGroupError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<InvalidPropertyGroupError> Encoder = new InvalidPropertyGroupErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<InvalidPropertyGroupError> Decoder = new InvalidPropertyGroupErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="InvalidPropertyGroupError" />
        /// class.</para>
        /// </summary>
        public InvalidPropertyGroupError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PropertyFieldTooLarge</para>
        /// </summary>
        public bool IsPropertyFieldTooLarge
        {
            get
            {
                return this is PropertyFieldTooLarge;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PropertyFieldTooLarge, or <c>null</c>.</para>
        /// </summary>
        public PropertyFieldTooLarge AsPropertyFieldTooLarge
        {
            get
            {
                return this as PropertyFieldTooLarge;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DoesNotFitTemplate</para>
        /// </summary>
        public bool IsDoesNotFitTemplate
        {
            get
            {
                return this is DoesNotFitTemplate;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DoesNotFitTemplate, or <c>null</c>.</para>
        /// </summary>
        public DoesNotFitTemplate AsDoesNotFitTemplate
        {
            get
            {
                return this as DoesNotFitTemplate;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is Path;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Path, or <c>null</c>.</para>
        /// </summary>
        public Path AsPath
        {
            get
            {
                return this as Path;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UnsupportedFolder</para>
        /// </summary>
        public bool IsUnsupportedFolder
        {
            get
            {
                return this is UnsupportedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UnsupportedFolder, or <c>null</c>.</para>
        /// </summary>
        public UnsupportedFolder AsUnsupportedFolder
        {
            get
            {
                return this as UnsupportedFolder;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="InvalidPropertyGroupError" />.</para>
        /// </summary>
        private class InvalidPropertyGroupErrorEncoder : enc.StructEncoder<InvalidPropertyGroupError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(InvalidPropertyGroupError value, enc.IJsonWriter writer)
            {
                if (value is PropertyFieldTooLarge)
                {
                    WriteProperty(".tag", "property_field_too_large", writer, enc.StringEncoder.Instance);
                    PropertyFieldTooLarge.Encoder.EncodeFields((PropertyFieldTooLarge)value, writer);
                    return;
                }
                if (value is DoesNotFitTemplate)
                {
                    WriteProperty(".tag", "does_not_fit_template", writer, enc.StringEncoder.Instance);
                    DoesNotFitTemplate.Encoder.EncodeFields((DoesNotFitTemplate)value, writer);
                    return;
                }
                if (value is Path)
                {
                    WriteProperty(".tag", "path", writer, enc.StringEncoder.Instance);
                    Path.Encoder.EncodeFields((Path)value, writer);
                    return;
                }
                if (value is UnsupportedFolder)
                {
                    WriteProperty(".tag", "unsupported_folder", writer, enc.StringEncoder.Instance);
                    UnsupportedFolder.Encoder.EncodeFields((UnsupportedFolder)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="InvalidPropertyGroupError" />.</para>
        /// </summary>
        private class InvalidPropertyGroupErrorDecoder : enc.UnionDecoder<InvalidPropertyGroupError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="InvalidPropertyGroupError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override InvalidPropertyGroupError Create()
            {
                return new InvalidPropertyGroupError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override InvalidPropertyGroupError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "property_field_too_large":
                        return PropertyFieldTooLarge.Decoder.DecodeFields(reader);
                    case "does_not_fit_template":
                        return DoesNotFitTemplate.Decoder.DecodeFields(reader);
                    case "path":
                        return Path.Decoder.DecodeFields(reader);
                    case "unsupported_folder":
                        return UnsupportedFolder.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>One or more of the supplied property field values is too large.</para>
        /// </summary>
        public sealed class PropertyFieldTooLarge : InvalidPropertyGroupError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PropertyFieldTooLarge> Encoder = new PropertyFieldTooLargeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PropertyFieldTooLarge> Decoder = new PropertyFieldTooLargeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PropertyFieldTooLarge" />
            /// class.</para>
            /// </summary>
            private PropertyFieldTooLarge()
            {
            }

            /// <summary>
            /// <para>A singleton instance of PropertyFieldTooLarge</para>
            /// </summary>
            public static readonly PropertyFieldTooLarge Instance = new PropertyFieldTooLarge();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PropertyFieldTooLarge" />.</para>
            /// </summary>
            private class PropertyFieldTooLargeEncoder : enc.StructEncoder<PropertyFieldTooLarge>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PropertyFieldTooLarge value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PropertyFieldTooLarge" />.</para>
            /// </summary>
            private class PropertyFieldTooLargeDecoder : enc.StructDecoder<PropertyFieldTooLarge>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PropertyFieldTooLarge"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PropertyFieldTooLarge Create()
                {
                    return PropertyFieldTooLarge.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>One or more of the supplied property fields does not conform to the template
        /// specifications.</para>
        /// </summary>
        public sealed class DoesNotFitTemplate : InvalidPropertyGroupError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<DoesNotFitTemplate> Encoder = new DoesNotFitTemplateEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<DoesNotFitTemplate> Decoder = new DoesNotFitTemplateDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DoesNotFitTemplate" />
            /// class.</para>
            /// </summary>
            private DoesNotFitTemplate()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DoesNotFitTemplate</para>
            /// </summary>
            public static readonly DoesNotFitTemplate Instance = new DoesNotFitTemplate();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="DoesNotFitTemplate" />.</para>
            /// </summary>
            private class DoesNotFitTemplateEncoder : enc.StructEncoder<DoesNotFitTemplate>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(DoesNotFitTemplate value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="DoesNotFitTemplate" />.</para>
            /// </summary>
            private class DoesNotFitTemplateDecoder : enc.StructDecoder<DoesNotFitTemplate>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="DoesNotFitTemplate"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override DoesNotFitTemplate Create()
                {
                    return DoesNotFitTemplate.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The path object</para>
        /// </summary>
        public sealed class Path : InvalidPropertyGroupError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Path> Encoder = new PathEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Path> Decoder = new PathDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Path(LookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Path" /> class.</para>
            /// </summary>
            private Path()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathEncoder : enc.StructEncoder<Path>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Path value, enc.IJsonWriter writer)
                {
                    WriteProperty("path", value.Value, writer, global::Dropbox.Api.FileProperties.LookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Path" />.</para>
            /// </summary>
            private class PathDecoder : enc.StructDecoder<Path>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Path" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Path Create()
                {
                    return new Path();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Path value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path":
                            value.Value = global::Dropbox.Api.FileProperties.LookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>This folder cannot be tagged. Tagging folders is not supported for team-owned
        /// templates.</para>
        /// </summary>
        public sealed class UnsupportedFolder : InvalidPropertyGroupError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UnsupportedFolder> Encoder = new UnsupportedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UnsupportedFolder> Decoder = new UnsupportedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UnsupportedFolder" />
            /// class.</para>
            /// </summary>
            private UnsupportedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UnsupportedFolder</para>
            /// </summary>
            public static readonly UnsupportedFolder Instance = new UnsupportedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UnsupportedFolder" />.</para>
            /// </summary>
            private class UnsupportedFolderEncoder : enc.StructEncoder<UnsupportedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UnsupportedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UnsupportedFolder" />.</para>
            /// </summary>
            private class UnsupportedFolderDecoder : enc.StructDecoder<UnsupportedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UnsupportedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UnsupportedFolder Create()
                {
                    return UnsupportedFolder.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamCommon
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Time range.</para>
    /// </summary>
    public class TimeRange
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TimeRange> Encoder = new TimeRangeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TimeRange> Decoder = new TimeRangeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TimeRange" /> class.</para>
        /// </summary>
        /// <param name="startTime">Optional starting time (inclusive).</param>
        /// <param name="endTime">Optional ending time (exclusive).</param>
        public TimeRange(sys.DateTime? startTime = null,
                         sys.DateTime? endTime = null)
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TimeRange" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public TimeRange()
        {
        }

        /// <summary>
        /// <para>Optional starting time (inclusive).</para>
        /// </summary>
        public sys.DateTime? StartTime { get; protected set; }

        /// <summary>
        /// <para>Optional ending time (exclusive).</para>
        /// </summary>
        public sys.DateTime? EndTime { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TimeRange" />.</para>
        /// </summary>
        private class TimeRangeEncoder : enc.StructEncoder<TimeRange>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TimeRange value, enc.IJsonWriter writer)
            {
                if (value.StartTime != null)
                {
                    WriteProperty("start_time", value.StartTime.Value, writer, enc.DateTimeEncoder.Instance);
                }
                if (value.EndTime != null)
                {
                    WriteProperty("end_time", value.EndTime.Value, writer, enc.DateTimeEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TimeRange" />.</para>
        /// </summary>
        private class TimeRangeDecoder : enc.StructDecoder<TimeRange>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TimeRange" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TimeRange Create()
            {
                return new TimeRange();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(TimeRange value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "start_time":
                        value.StartTime = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "end_time":
                        value.EndTime = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

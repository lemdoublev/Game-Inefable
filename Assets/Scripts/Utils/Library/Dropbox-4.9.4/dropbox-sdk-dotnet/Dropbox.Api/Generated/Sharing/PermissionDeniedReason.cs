// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Possible reasons the user is denied a permission.</para>
    /// </summary>
    public class PermissionDeniedReason
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PermissionDeniedReason> Encoder = new PermissionDeniedReasonEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PermissionDeniedReason> Decoder = new PermissionDeniedReasonDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PermissionDeniedReason" />
        /// class.</para>
        /// </summary>
        public PermissionDeniedReason()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// UserNotSameTeamAsOwner</para>
        /// </summary>
        public bool IsUserNotSameTeamAsOwner
        {
            get
            {
                return this is UserNotSameTeamAsOwner;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserNotSameTeamAsOwner, or <c>null</c>.</para>
        /// </summary>
        public UserNotSameTeamAsOwner AsUserNotSameTeamAsOwner
        {
            get
            {
                return this as UserNotSameTeamAsOwner;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserNotAllowedByOwner</para>
        /// </summary>
        public bool IsUserNotAllowedByOwner
        {
            get
            {
                return this is UserNotAllowedByOwner;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserNotAllowedByOwner, or <c>null</c>.</para>
        /// </summary>
        public UserNotAllowedByOwner AsUserNotAllowedByOwner
        {
            get
            {
                return this as UserNotAllowedByOwner;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TargetIsIndirectMember</para>
        /// </summary>
        public bool IsTargetIsIndirectMember
        {
            get
            {
                return this is TargetIsIndirectMember;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TargetIsIndirectMember, or <c>null</c>.</para>
        /// </summary>
        public TargetIsIndirectMember AsTargetIsIndirectMember
        {
            get
            {
                return this as TargetIsIndirectMember;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TargetIsOwner</para>
        /// </summary>
        public bool IsTargetIsOwner
        {
            get
            {
                return this is TargetIsOwner;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TargetIsOwner, or <c>null</c>.</para>
        /// </summary>
        public TargetIsOwner AsTargetIsOwner
        {
            get
            {
                return this as TargetIsOwner;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TargetIsSelf</para>
        /// </summary>
        public bool IsTargetIsSelf
        {
            get
            {
                return this is TargetIsSelf;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TargetIsSelf, or <c>null</c>.</para>
        /// </summary>
        public TargetIsSelf AsTargetIsSelf
        {
            get
            {
                return this as TargetIsSelf;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TargetNotActive</para>
        /// </summary>
        public bool IsTargetNotActive
        {
            get
            {
                return this is TargetNotActive;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TargetNotActive, or <c>null</c>.</para>
        /// </summary>
        public TargetNotActive AsTargetNotActive
        {
            get
            {
                return this as TargetNotActive;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// FolderIsLimitedTeamFolder</para>
        /// </summary>
        public bool IsFolderIsLimitedTeamFolder
        {
            get
            {
                return this is FolderIsLimitedTeamFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FolderIsLimitedTeamFolder, or <c>null</c>.</para>
        /// </summary>
        public FolderIsLimitedTeamFolder AsFolderIsLimitedTeamFolder
        {
            get
            {
                return this as FolderIsLimitedTeamFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is OwnerNotOnTeam</para>
        /// </summary>
        public bool IsOwnerNotOnTeam
        {
            get
            {
                return this is OwnerNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a OwnerNotOnTeam, or <c>null</c>.</para>
        /// </summary>
        public OwnerNotOnTeam AsOwnerNotOnTeam
        {
            get
            {
                return this as OwnerNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PermissionDenied</para>
        /// </summary>
        public bool IsPermissionDenied
        {
            get
            {
                return this is PermissionDenied;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PermissionDenied, or <c>null</c>.</para>
        /// </summary>
        public PermissionDenied AsPermissionDenied
        {
            get
            {
                return this as PermissionDenied;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RestrictedByTeam</para>
        /// </summary>
        public bool IsRestrictedByTeam
        {
            get
            {
                return this is RestrictedByTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedByTeam, or <c>null</c>.</para>
        /// </summary>
        public RestrictedByTeam AsRestrictedByTeam
        {
            get
            {
                return this as RestrictedByTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserAccountType</para>
        /// </summary>
        public bool IsUserAccountType
        {
            get
            {
                return this is UserAccountType;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserAccountType, or <c>null</c>.</para>
        /// </summary>
        public UserAccountType AsUserAccountType
        {
            get
            {
                return this as UserAccountType;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserNotOnTeam</para>
        /// </summary>
        public bool IsUserNotOnTeam
        {
            get
            {
                return this is UserNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserNotOnTeam, or <c>null</c>.</para>
        /// </summary>
        public UserNotOnTeam AsUserNotOnTeam
        {
            get
            {
                return this as UserNotOnTeam;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// FolderIsInsideSharedFolder</para>
        /// </summary>
        public bool IsFolderIsInsideSharedFolder
        {
            get
            {
                return this is FolderIsInsideSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FolderIsInsideSharedFolder, or <c>null</c>.</para>
        /// </summary>
        public FolderIsInsideSharedFolder AsFolderIsInsideSharedFolder
        {
            get
            {
                return this as FolderIsInsideSharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// RestrictedByParentFolder</para>
        /// </summary>
        public bool IsRestrictedByParentFolder
        {
            get
            {
                return this is RestrictedByParentFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedByParentFolder, or <c>null</c>.</para>
        /// </summary>
        public RestrictedByParentFolder AsRestrictedByParentFolder
        {
            get
            {
                return this as RestrictedByParentFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsufficientPlan</para>
        /// </summary>
        public bool IsInsufficientPlan
        {
            get
            {
                return this is InsufficientPlan;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPlan, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPlan AsInsufficientPlan
        {
            get
            {
                return this as InsufficientPlan;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PermissionDeniedReason" />.</para>
        /// </summary>
        private class PermissionDeniedReasonEncoder : enc.StructEncoder<PermissionDeniedReason>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PermissionDeniedReason value, enc.IJsonWriter writer)
            {
                if (value is UserNotSameTeamAsOwner)
                {
                    WriteProperty(".tag", "user_not_same_team_as_owner", writer, enc.StringEncoder.Instance);
                    UserNotSameTeamAsOwner.Encoder.EncodeFields((UserNotSameTeamAsOwner)value, writer);
                    return;
                }
                if (value is UserNotAllowedByOwner)
                {
                    WriteProperty(".tag", "user_not_allowed_by_owner", writer, enc.StringEncoder.Instance);
                    UserNotAllowedByOwner.Encoder.EncodeFields((UserNotAllowedByOwner)value, writer);
                    return;
                }
                if (value is TargetIsIndirectMember)
                {
                    WriteProperty(".tag", "target_is_indirect_member", writer, enc.StringEncoder.Instance);
                    TargetIsIndirectMember.Encoder.EncodeFields((TargetIsIndirectMember)value, writer);
                    return;
                }
                if (value is TargetIsOwner)
                {
                    WriteProperty(".tag", "target_is_owner", writer, enc.StringEncoder.Instance);
                    TargetIsOwner.Encoder.EncodeFields((TargetIsOwner)value, writer);
                    return;
                }
                if (value is TargetIsSelf)
                {
                    WriteProperty(".tag", "target_is_self", writer, enc.StringEncoder.Instance);
                    TargetIsSelf.Encoder.EncodeFields((TargetIsSelf)value, writer);
                    return;
                }
                if (value is TargetNotActive)
                {
                    WriteProperty(".tag", "target_not_active", writer, enc.StringEncoder.Instance);
                    TargetNotActive.Encoder.EncodeFields((TargetNotActive)value, writer);
                    return;
                }
                if (value is FolderIsLimitedTeamFolder)
                {
                    WriteProperty(".tag", "folder_is_limited_team_folder", writer, enc.StringEncoder.Instance);
                    FolderIsLimitedTeamFolder.Encoder.EncodeFields((FolderIsLimitedTeamFolder)value, writer);
                    return;
                }
                if (value is OwnerNotOnTeam)
                {
                    WriteProperty(".tag", "owner_not_on_team", writer, enc.StringEncoder.Instance);
                    OwnerNotOnTeam.Encoder.EncodeFields((OwnerNotOnTeam)value, writer);
                    return;
                }
                if (value is PermissionDenied)
                {
                    WriteProperty(".tag", "permission_denied", writer, enc.StringEncoder.Instance);
                    PermissionDenied.Encoder.EncodeFields((PermissionDenied)value, writer);
                    return;
                }
                if (value is RestrictedByTeam)
                {
                    WriteProperty(".tag", "restricted_by_team", writer, enc.StringEncoder.Instance);
                    RestrictedByTeam.Encoder.EncodeFields((RestrictedByTeam)value, writer);
                    return;
                }
                if (value is UserAccountType)
                {
                    WriteProperty(".tag", "user_account_type", writer, enc.StringEncoder.Instance);
                    UserAccountType.Encoder.EncodeFields((UserAccountType)value, writer);
                    return;
                }
                if (value is UserNotOnTeam)
                {
                    WriteProperty(".tag", "user_not_on_team", writer, enc.StringEncoder.Instance);
                    UserNotOnTeam.Encoder.EncodeFields((UserNotOnTeam)value, writer);
                    return;
                }
                if (value is FolderIsInsideSharedFolder)
                {
                    WriteProperty(".tag", "folder_is_inside_shared_folder", writer, enc.StringEncoder.Instance);
                    FolderIsInsideSharedFolder.Encoder.EncodeFields((FolderIsInsideSharedFolder)value, writer);
                    return;
                }
                if (value is RestrictedByParentFolder)
                {
                    WriteProperty(".tag", "restricted_by_parent_folder", writer, enc.StringEncoder.Instance);
                    RestrictedByParentFolder.Encoder.EncodeFields((RestrictedByParentFolder)value, writer);
                    return;
                }
                if (value is InsufficientPlan)
                {
                    WriteProperty(".tag", "insufficient_plan", writer, enc.StringEncoder.Instance);
                    InsufficientPlan.Encoder.EncodeFields((InsufficientPlan)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PermissionDeniedReason" />.</para>
        /// </summary>
        private class PermissionDeniedReasonDecoder : enc.UnionDecoder<PermissionDeniedReason>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PermissionDeniedReason"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PermissionDeniedReason Create()
            {
                return new PermissionDeniedReason();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PermissionDeniedReason Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "user_not_same_team_as_owner":
                        return UserNotSameTeamAsOwner.Decoder.DecodeFields(reader);
                    case "user_not_allowed_by_owner":
                        return UserNotAllowedByOwner.Decoder.DecodeFields(reader);
                    case "target_is_indirect_member":
                        return TargetIsIndirectMember.Decoder.DecodeFields(reader);
                    case "target_is_owner":
                        return TargetIsOwner.Decoder.DecodeFields(reader);
                    case "target_is_self":
                        return TargetIsSelf.Decoder.DecodeFields(reader);
                    case "target_not_active":
                        return TargetNotActive.Decoder.DecodeFields(reader);
                    case "folder_is_limited_team_folder":
                        return FolderIsLimitedTeamFolder.Decoder.DecodeFields(reader);
                    case "owner_not_on_team":
                        return OwnerNotOnTeam.Decoder.DecodeFields(reader);
                    case "permission_denied":
                        return PermissionDenied.Decoder.DecodeFields(reader);
                    case "restricted_by_team":
                        return RestrictedByTeam.Decoder.DecodeFields(reader);
                    case "user_account_type":
                        return UserAccountType.Decoder.DecodeFields(reader);
                    case "user_not_on_team":
                        return UserNotOnTeam.Decoder.DecodeFields(reader);
                    case "folder_is_inside_shared_folder":
                        return FolderIsInsideSharedFolder.Decoder.DecodeFields(reader);
                    case "restricted_by_parent_folder":
                        return RestrictedByParentFolder.Decoder.DecodeFields(reader);
                    case "insufficient_plan":
                        return InsufficientPlan.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>User is not on the same team as the folder owner.</para>
        /// </summary>
        public sealed class UserNotSameTeamAsOwner : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserNotSameTeamAsOwner> Encoder = new UserNotSameTeamAsOwnerEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserNotSameTeamAsOwner> Decoder = new UserNotSameTeamAsOwnerDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserNotSameTeamAsOwner" />
            /// class.</para>
            /// </summary>
            private UserNotSameTeamAsOwner()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserNotSameTeamAsOwner</para>
            /// </summary>
            public static readonly UserNotSameTeamAsOwner Instance = new UserNotSameTeamAsOwner();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserNotSameTeamAsOwner" />.</para>
            /// </summary>
            private class UserNotSameTeamAsOwnerEncoder : enc.StructEncoder<UserNotSameTeamAsOwner>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserNotSameTeamAsOwner value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserNotSameTeamAsOwner" />.</para>
            /// </summary>
            private class UserNotSameTeamAsOwnerDecoder : enc.StructDecoder<UserNotSameTeamAsOwner>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserNotSameTeamAsOwner"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserNotSameTeamAsOwner Create()
                {
                    return UserNotSameTeamAsOwner.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>User is prohibited by the owner from taking the action.</para>
        /// </summary>
        public sealed class UserNotAllowedByOwner : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserNotAllowedByOwner> Encoder = new UserNotAllowedByOwnerEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserNotAllowedByOwner> Decoder = new UserNotAllowedByOwnerDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserNotAllowedByOwner" />
            /// class.</para>
            /// </summary>
            private UserNotAllowedByOwner()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserNotAllowedByOwner</para>
            /// </summary>
            public static readonly UserNotAllowedByOwner Instance = new UserNotAllowedByOwner();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserNotAllowedByOwner" />.</para>
            /// </summary>
            private class UserNotAllowedByOwnerEncoder : enc.StructEncoder<UserNotAllowedByOwner>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserNotAllowedByOwner value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserNotAllowedByOwner" />.</para>
            /// </summary>
            private class UserNotAllowedByOwnerDecoder : enc.StructDecoder<UserNotAllowedByOwner>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserNotAllowedByOwner"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserNotAllowedByOwner Create()
                {
                    return UserNotAllowedByOwner.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Target is indirectly a member of the folder, for example by being part of a
        /// group.</para>
        /// </summary>
        public sealed class TargetIsIndirectMember : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TargetIsIndirectMember> Encoder = new TargetIsIndirectMemberEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TargetIsIndirectMember> Decoder = new TargetIsIndirectMemberDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TargetIsIndirectMember" />
            /// class.</para>
            /// </summary>
            private TargetIsIndirectMember()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TargetIsIndirectMember</para>
            /// </summary>
            public static readonly TargetIsIndirectMember Instance = new TargetIsIndirectMember();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TargetIsIndirectMember" />.</para>
            /// </summary>
            private class TargetIsIndirectMemberEncoder : enc.StructEncoder<TargetIsIndirectMember>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TargetIsIndirectMember value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TargetIsIndirectMember" />.</para>
            /// </summary>
            private class TargetIsIndirectMemberDecoder : enc.StructDecoder<TargetIsIndirectMember>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TargetIsIndirectMember"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TargetIsIndirectMember Create()
                {
                    return TargetIsIndirectMember.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Target is the owner of the folder.</para>
        /// </summary>
        public sealed class TargetIsOwner : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TargetIsOwner> Encoder = new TargetIsOwnerEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TargetIsOwner> Decoder = new TargetIsOwnerDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TargetIsOwner" />
            /// class.</para>
            /// </summary>
            private TargetIsOwner()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TargetIsOwner</para>
            /// </summary>
            public static readonly TargetIsOwner Instance = new TargetIsOwner();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TargetIsOwner" />.</para>
            /// </summary>
            private class TargetIsOwnerEncoder : enc.StructEncoder<TargetIsOwner>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TargetIsOwner value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TargetIsOwner" />.</para>
            /// </summary>
            private class TargetIsOwnerDecoder : enc.StructDecoder<TargetIsOwner>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TargetIsOwner" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TargetIsOwner Create()
                {
                    return TargetIsOwner.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Target is the user itself.</para>
        /// </summary>
        public sealed class TargetIsSelf : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TargetIsSelf> Encoder = new TargetIsSelfEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TargetIsSelf> Decoder = new TargetIsSelfDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TargetIsSelf" />
            /// class.</para>
            /// </summary>
            private TargetIsSelf()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TargetIsSelf</para>
            /// </summary>
            public static readonly TargetIsSelf Instance = new TargetIsSelf();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TargetIsSelf" />.</para>
            /// </summary>
            private class TargetIsSelfEncoder : enc.StructEncoder<TargetIsSelf>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TargetIsSelf value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TargetIsSelf" />.</para>
            /// </summary>
            private class TargetIsSelfDecoder : enc.StructDecoder<TargetIsSelf>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TargetIsSelf" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TargetIsSelf Create()
                {
                    return TargetIsSelf.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Target is not an active member of the team.</para>
        /// </summary>
        public sealed class TargetNotActive : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TargetNotActive> Encoder = new TargetNotActiveEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TargetNotActive> Decoder = new TargetNotActiveDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TargetNotActive" />
            /// class.</para>
            /// </summary>
            private TargetNotActive()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TargetNotActive</para>
            /// </summary>
            public static readonly TargetNotActive Instance = new TargetNotActive();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TargetNotActive" />.</para>
            /// </summary>
            private class TargetNotActiveEncoder : enc.StructEncoder<TargetNotActive>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TargetNotActive value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TargetNotActive" />.</para>
            /// </summary>
            private class TargetNotActiveDecoder : enc.StructDecoder<TargetNotActive>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TargetNotActive" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TargetNotActive Create()
                {
                    return TargetNotActive.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Folder is team folder for a limited team.</para>
        /// </summary>
        public sealed class FolderIsLimitedTeamFolder : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FolderIsLimitedTeamFolder> Encoder = new FolderIsLimitedTeamFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FolderIsLimitedTeamFolder> Decoder = new FolderIsLimitedTeamFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FolderIsLimitedTeamFolder"
            /// /> class.</para>
            /// </summary>
            private FolderIsLimitedTeamFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FolderIsLimitedTeamFolder</para>
            /// </summary>
            public static readonly FolderIsLimitedTeamFolder Instance = new FolderIsLimitedTeamFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FolderIsLimitedTeamFolder" />.</para>
            /// </summary>
            private class FolderIsLimitedTeamFolderEncoder : enc.StructEncoder<FolderIsLimitedTeamFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FolderIsLimitedTeamFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FolderIsLimitedTeamFolder" />.</para>
            /// </summary>
            private class FolderIsLimitedTeamFolderDecoder : enc.StructDecoder<FolderIsLimitedTeamFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FolderIsLimitedTeamFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FolderIsLimitedTeamFolder Create()
                {
                    return FolderIsLimitedTeamFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The content owner needs to be on a Dropbox team to perform this
        /// action.</para>
        /// </summary>
        public sealed class OwnerNotOnTeam : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<OwnerNotOnTeam> Encoder = new OwnerNotOnTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<OwnerNotOnTeam> Decoder = new OwnerNotOnTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="OwnerNotOnTeam" />
            /// class.</para>
            /// </summary>
            private OwnerNotOnTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of OwnerNotOnTeam</para>
            /// </summary>
            public static readonly OwnerNotOnTeam Instance = new OwnerNotOnTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="OwnerNotOnTeam" />.</para>
            /// </summary>
            private class OwnerNotOnTeamEncoder : enc.StructEncoder<OwnerNotOnTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(OwnerNotOnTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="OwnerNotOnTeam" />.</para>
            /// </summary>
            private class OwnerNotOnTeamDecoder : enc.StructDecoder<OwnerNotOnTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="OwnerNotOnTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override OwnerNotOnTeam Create()
                {
                    return OwnerNotOnTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user does not have permission to perform this action on the link.</para>
        /// </summary>
        public sealed class PermissionDenied : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PermissionDenied> Encoder = new PermissionDeniedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PermissionDenied> Decoder = new PermissionDeniedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PermissionDenied" />
            /// class.</para>
            /// </summary>
            private PermissionDenied()
            {
            }

            /// <summary>
            /// <para>A singleton instance of PermissionDenied</para>
            /// </summary>
            public static readonly PermissionDenied Instance = new PermissionDenied();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PermissionDenied" />.</para>
            /// </summary>
            private class PermissionDeniedEncoder : enc.StructEncoder<PermissionDenied>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PermissionDenied value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PermissionDenied" />.</para>
            /// </summary>
            private class PermissionDeniedDecoder : enc.StructDecoder<PermissionDenied>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PermissionDenied" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PermissionDenied Create()
                {
                    return PermissionDenied.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user's team policy prevents performing this action on the link.</para>
        /// </summary>
        public sealed class RestrictedByTeam : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RestrictedByTeam> Encoder = new RestrictedByTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RestrictedByTeam> Decoder = new RestrictedByTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedByTeam" />
            /// class.</para>
            /// </summary>
            private RestrictedByTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedByTeam</para>
            /// </summary>
            public static readonly RestrictedByTeam Instance = new RestrictedByTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RestrictedByTeam" />.</para>
            /// </summary>
            private class RestrictedByTeamEncoder : enc.StructEncoder<RestrictedByTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RestrictedByTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RestrictedByTeam" />.</para>
            /// </summary>
            private class RestrictedByTeamDecoder : enc.StructDecoder<RestrictedByTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RestrictedByTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RestrictedByTeam Create()
                {
                    return RestrictedByTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user's account type does not support this action.</para>
        /// </summary>
        public sealed class UserAccountType : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserAccountType> Encoder = new UserAccountTypeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserAccountType> Decoder = new UserAccountTypeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserAccountType" />
            /// class.</para>
            /// </summary>
            private UserAccountType()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserAccountType</para>
            /// </summary>
            public static readonly UserAccountType Instance = new UserAccountType();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserAccountType" />.</para>
            /// </summary>
            private class UserAccountTypeEncoder : enc.StructEncoder<UserAccountType>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserAccountType value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserAccountType" />.</para>
            /// </summary>
            private class UserAccountTypeDecoder : enc.StructDecoder<UserAccountType>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserAccountType" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserAccountType Create()
                {
                    return UserAccountType.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user needs to be on a Dropbox team to perform this action.</para>
        /// </summary>
        public sealed class UserNotOnTeam : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserNotOnTeam> Encoder = new UserNotOnTeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserNotOnTeam> Decoder = new UserNotOnTeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserNotOnTeam" />
            /// class.</para>
            /// </summary>
            private UserNotOnTeam()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserNotOnTeam</para>
            /// </summary>
            public static readonly UserNotOnTeam Instance = new UserNotOnTeam();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserNotOnTeam" />.</para>
            /// </summary>
            private class UserNotOnTeamEncoder : enc.StructEncoder<UserNotOnTeam>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserNotOnTeam value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserNotOnTeam" />.</para>
            /// </summary>
            private class UserNotOnTeamDecoder : enc.StructDecoder<UserNotOnTeam>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserNotOnTeam" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserNotOnTeam Create()
                {
                    return UserNotOnTeam.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Folder is inside of another shared folder.</para>
        /// </summary>
        public sealed class FolderIsInsideSharedFolder : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FolderIsInsideSharedFolder> Encoder = new FolderIsInsideSharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FolderIsInsideSharedFolder> Decoder = new FolderIsInsideSharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FolderIsInsideSharedFolder"
            /// /> class.</para>
            /// </summary>
            private FolderIsInsideSharedFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FolderIsInsideSharedFolder</para>
            /// </summary>
            public static readonly FolderIsInsideSharedFolder Instance = new FolderIsInsideSharedFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FolderIsInsideSharedFolder" />.</para>
            /// </summary>
            private class FolderIsInsideSharedFolderEncoder : enc.StructEncoder<FolderIsInsideSharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FolderIsInsideSharedFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FolderIsInsideSharedFolder" />.</para>
            /// </summary>
            private class FolderIsInsideSharedFolderDecoder : enc.StructDecoder<FolderIsInsideSharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FolderIsInsideSharedFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FolderIsInsideSharedFolder Create()
                {
                    return FolderIsInsideSharedFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Policy cannot be changed due to restrictions from parent folder.</para>
        /// </summary>
        public sealed class RestrictedByParentFolder : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<RestrictedByParentFolder> Encoder = new RestrictedByParentFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<RestrictedByParentFolder> Decoder = new RestrictedByParentFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedByParentFolder" />
            /// class.</para>
            /// </summary>
            private RestrictedByParentFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedByParentFolder</para>
            /// </summary>
            public static readonly RestrictedByParentFolder Instance = new RestrictedByParentFolder();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="RestrictedByParentFolder" />.</para>
            /// </summary>
            private class RestrictedByParentFolderEncoder : enc.StructEncoder<RestrictedByParentFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(RestrictedByParentFolder value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="RestrictedByParentFolder" />.</para>
            /// </summary>
            private class RestrictedByParentFolderDecoder : enc.StructDecoder<RestrictedByParentFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="RestrictedByParentFolder"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override RestrictedByParentFolder Create()
                {
                    return RestrictedByParentFolder.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The insufficient plan object</para>
        /// </summary>
        public sealed class InsufficientPlan : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPlan> Encoder = new InsufficientPlanEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPlan> Decoder = new InsufficientPlanDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPlan" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public InsufficientPlan(global::Dropbox.Api.Sharing.InsufficientPlan value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPlan" />
            /// class.</para>
            /// </summary>
            private InsufficientPlan()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public global::Dropbox.Api.Sharing.InsufficientPlan Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPlan" />.</para>
            /// </summary>
            private class InsufficientPlanEncoder : enc.StructEncoder<InsufficientPlan>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPlan value, enc.IJsonWriter writer)
                {
                    WriteProperty("insufficient_plan", value.Value, writer, global::Dropbox.Api.Sharing.InsufficientPlan.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPlan" />.</para>
            /// </summary>
            private class InsufficientPlanDecoder : enc.StructDecoder<InsufficientPlan>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPlan" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPlan Create()
                {
                    return new InsufficientPlan();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override InsufficientPlan DecodeFields(enc.IJsonReader reader)
                {
                    return new InsufficientPlan(global::Dropbox.Api.Sharing.InsufficientPlan.Decoder.DecodeFields(reader));
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PermissionDeniedReason
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

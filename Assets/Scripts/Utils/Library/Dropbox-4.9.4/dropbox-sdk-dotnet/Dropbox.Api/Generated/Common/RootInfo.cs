// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Common
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Information about current user's root.</para>
    /// </summary>
    /// <seealso cref="TeamRootInfo" />
    /// <seealso cref="UserRootInfo" />
    public class RootInfo
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<RootInfo> Encoder = new RootInfoEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<RootInfo> Decoder = new RootInfoDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RootInfo" /> class.</para>
        /// </summary>
        /// <param name="rootNamespaceId">The namespace ID for user's root namespace. It will
        /// be the namespace ID of the shared team root if the user is member of a team with a
        /// separate team root. Otherwise it will be same as <see
        /// cref="Dropbox.Api.Common.RootInfo.HomeNamespaceId" />.</param>
        /// <param name="homeNamespaceId">The namespace ID for user's home namespace.</param>
        protected RootInfo(string rootNamespaceId,
                           string homeNamespaceId)
        {
            if (rootNamespaceId == null)
            {
                throw new sys.ArgumentNullException("rootNamespaceId");
            }
            if (!re.Regex.IsMatch(rootNamespaceId, @"\A(?:[-_0-9a-zA-Z:]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("rootNamespaceId", @"Value should match pattern '\A(?:[-_0-9a-zA-Z:]+)\z'");
            }

            if (homeNamespaceId == null)
            {
                throw new sys.ArgumentNullException("homeNamespaceId");
            }
            if (!re.Regex.IsMatch(homeNamespaceId, @"\A(?:[-_0-9a-zA-Z:]+)\z"))
            {
                throw new sys.ArgumentOutOfRangeException("homeNamespaceId", @"Value should match pattern '\A(?:[-_0-9a-zA-Z:]+)\z'");
            }

            this.RootNamespaceId = rootNamespaceId;
            this.HomeNamespaceId = homeNamespaceId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RootInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public RootInfo()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Team</para>
        /// </summary>
        public bool IsTeam
        {
            get
            {
                return this is TeamRootInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="TeamRootInfo" />, or <c>null</c>.</para>
        /// </summary>
        public TeamRootInfo AsTeam
        {
            get
            {
                return this as TeamRootInfo;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is User</para>
        /// </summary>
        public bool IsUser
        {
            get
            {
                return this is UserRootInfo;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="UserRootInfo" />, or <c>null</c>.</para>
        /// </summary>
        public UserRootInfo AsUser
        {
            get
            {
                return this as UserRootInfo;
            }
        }

        /// <summary>
        /// <para>The namespace ID for user's root namespace. It will be the namespace ID of
        /// the shared team root if the user is member of a team with a separate team root.
        /// Otherwise it will be same as <see
        /// cref="Dropbox.Api.Common.RootInfo.HomeNamespaceId" />.</para>
        /// </summary>
        public string RootNamespaceId { get; protected set; }

        /// <summary>
        /// <para>The namespace ID for user's home namespace.</para>
        /// </summary>
        public string HomeNamespaceId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="RootInfo" />.</para>
        /// </summary>
        private class RootInfoEncoder : enc.StructEncoder<RootInfo>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(RootInfo value, enc.IJsonWriter writer)
            {
                if (value is TeamRootInfo)
                {
                    WriteProperty(".tag", "team", writer, enc.StringEncoder.Instance);
                    TeamRootInfo.Encoder.EncodeFields((TeamRootInfo)value, writer);
                    return;
                }
                if (value is UserRootInfo)
                {
                    WriteProperty(".tag", "user", writer, enc.StringEncoder.Instance);
                    UserRootInfo.Encoder.EncodeFields((UserRootInfo)value, writer);
                    return;
                }
                WriteProperty("root_namespace_id", value.RootNamespaceId, writer, enc.StringEncoder.Instance);
                WriteProperty("home_namespace_id", value.HomeNamespaceId, writer, enc.StringEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="RootInfo" />.</para>
        /// </summary>
        private class RootInfoDecoder : enc.UnionDecoder<RootInfo>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="RootInfo" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override RootInfo Create()
            {
                return new RootInfo();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override RootInfo Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team":
                        return TeamRootInfo.Decoder.DecodeFields(reader);
                    case "user":
                        return UserRootInfo.Decoder.DecodeFields(reader);
                    default:
                        return base.Decode(reader);
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(RootInfo value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "root_namespace_id":
                        value.RootNamespaceId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "home_namespace_id":
                        value.HomeNamespaceId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.FileProperties
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The template filter object</para>
    /// </summary>
    public class TemplateFilter
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<TemplateFilter> Encoder = new TemplateFilterEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<TemplateFilter> Decoder = new TemplateFilterDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="TemplateFilter" /> class.</para>
        /// </summary>
        public TemplateFilter()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FilterNone</para>
        /// </summary>
        public bool IsFilterNone
        {
            get
            {
                return this is FilterNone;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FilterNone, or <c>null</c>.</para>
        /// </summary>
        public FilterNone AsFilterNone
        {
            get
            {
                return this as FilterNone;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FilterSome</para>
        /// </summary>
        public bool IsFilterSome
        {
            get
            {
                return this is FilterSome;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FilterSome, or <c>null</c>.</para>
        /// </summary>
        public FilterSome AsFilterSome
        {
            get
            {
                return this as FilterSome;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="TemplateFilter" />.</para>
        /// </summary>
        private class TemplateFilterEncoder : enc.StructEncoder<TemplateFilter>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(TemplateFilter value, enc.IJsonWriter writer)
            {
                if (value is FilterNone)
                {
                    WriteProperty(".tag", "filter_none", writer, enc.StringEncoder.Instance);
                    FilterNone.Encoder.EncodeFields((FilterNone)value, writer);
                    return;
                }
                if (value is FilterSome)
                {
                    WriteProperty(".tag", "filter_some", writer, enc.StringEncoder.Instance);
                    FilterSome.Encoder.EncodeFields((FilterSome)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="TemplateFilter" />.</para>
        /// </summary>
        private class TemplateFilterDecoder : enc.UnionDecoder<TemplateFilter>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="TemplateFilter" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override TemplateFilter Create()
            {
                return new TemplateFilter();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override TemplateFilter Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "filter_none":
                        return FilterNone.Decoder.DecodeFields(reader);
                    case "filter_some":
                        return FilterSome.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>No templates will be filtered from the result (all templates will be
        /// returned).</para>
        /// </summary>
        public sealed class FilterNone : TemplateFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FilterNone> Encoder = new FilterNoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FilterNone> Decoder = new FilterNoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FilterNone" /> class.</para>
            /// </summary>
            private FilterNone()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FilterNone</para>
            /// </summary>
            public static readonly FilterNone Instance = new FilterNone();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FilterNone" />.</para>
            /// </summary>
            private class FilterNoneEncoder : enc.StructEncoder<FilterNone>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FilterNone value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FilterNone" />.</para>
            /// </summary>
            private class FilterNoneDecoder : enc.StructDecoder<FilterNone>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FilterNone" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FilterNone Create()
                {
                    return FilterNone.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Only templates with an ID in the supplied list will be returned (a subset of
        /// templates will be returned).</para>
        /// </summary>
        public sealed class FilterSome : TemplateFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FilterSome> Encoder = new FilterSomeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FilterSome> Decoder = new FilterSomeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FilterSome" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public FilterSome(col.IEnumerable<string> value)
            {
                this.Value = new col.List<string>(value);
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FilterSome" /> class.</para>
            /// </summary>
            private FilterSome()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public col.IList<string> Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FilterSome" />.</para>
            /// </summary>
            private class FilterSomeEncoder : enc.StructEncoder<FilterSome>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FilterSome value, enc.IJsonWriter writer)
                {
                    WriteListProperty("filter_some", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FilterSome" />.</para>
            /// </summary>
            private class FilterSomeDecoder : enc.StructDecoder<FilterSome>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FilterSome" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FilterSome Create()
                {
                    return new FilterSome();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(FilterSome value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "filter_some":
                            value.Value = ReadList<string>(reader, enc.StringDecoder.Instance);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : TemplateFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The user on paper doc filter object</para>
    /// </summary>
    public class UserOnPaperDocFilter
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<UserOnPaperDocFilter> Encoder = new UserOnPaperDocFilterEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<UserOnPaperDocFilter> Decoder = new UserOnPaperDocFilterDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserOnPaperDocFilter" />
        /// class.</para>
        /// </summary>
        public UserOnPaperDocFilter()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Visited</para>
        /// </summary>
        public bool IsVisited
        {
            get
            {
                return this is Visited;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Visited, or <c>null</c>.</para>
        /// </summary>
        public Visited AsVisited
        {
            get
            {
                return this as Visited;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Shared</para>
        /// </summary>
        public bool IsShared
        {
            get
            {
                return this is Shared;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Shared, or <c>null</c>.</para>
        /// </summary>
        public Shared AsShared
        {
            get
            {
                return this as Shared;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="UserOnPaperDocFilter" />.</para>
        /// </summary>
        private class UserOnPaperDocFilterEncoder : enc.StructEncoder<UserOnPaperDocFilter>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(UserOnPaperDocFilter value, enc.IJsonWriter writer)
            {
                if (value is Visited)
                {
                    WriteProperty(".tag", "visited", writer, enc.StringEncoder.Instance);
                    Visited.Encoder.EncodeFields((Visited)value, writer);
                    return;
                }
                if (value is Shared)
                {
                    WriteProperty(".tag", "shared", writer, enc.StringEncoder.Instance);
                    Shared.Encoder.EncodeFields((Shared)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="UserOnPaperDocFilter" />.</para>
        /// </summary>
        private class UserOnPaperDocFilterDecoder : enc.UnionDecoder<UserOnPaperDocFilter>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="UserOnPaperDocFilter" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override UserOnPaperDocFilter Create()
            {
                return new UserOnPaperDocFilter();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override UserOnPaperDocFilter Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "visited":
                        return Visited.Decoder.DecodeFields(reader);
                    case "shared":
                        return Shared.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>all users who have visited the Paper doc.</para>
        /// </summary>
        public sealed class Visited : UserOnPaperDocFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Visited> Encoder = new VisitedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Visited> Decoder = new VisitedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Visited" /> class.</para>
            /// </summary>
            private Visited()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Visited</para>
            /// </summary>
            public static readonly Visited Instance = new Visited();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Visited" />.</para>
            /// </summary>
            private class VisitedEncoder : enc.StructEncoder<Visited>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Visited value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Visited" />.</para>
            /// </summary>
            private class VisitedDecoder : enc.StructDecoder<Visited>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Visited" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Visited Create()
                {
                    return Visited.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>All uses who are shared on the Paper doc. This includes all users who have
        /// visited the Paper doc as well as those who have not.</para>
        /// </summary>
        public sealed class Shared : UserOnPaperDocFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Shared> Encoder = new SharedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Shared> Decoder = new SharedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Shared" /> class.</para>
            /// </summary>
            private Shared()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Shared</para>
            /// </summary>
            public static readonly Shared Instance = new Shared();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Shared" />.</para>
            /// </summary>
            private class SharedEncoder : enc.StructEncoder<Shared>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Shared value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Shared" />.</para>
            /// </summary>
            private class SharedDecoder : enc.StructDecoder<Shared>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Shared" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Shared Create()
                {
                    return Shared.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : UserOnPaperDocFilter
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

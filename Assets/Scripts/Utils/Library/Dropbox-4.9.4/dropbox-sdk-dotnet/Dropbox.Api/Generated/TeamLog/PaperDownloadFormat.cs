// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper download format object</para>
    /// </summary>
    public class PaperDownloadFormat
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperDownloadFormat> Encoder = new PaperDownloadFormatEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperDownloadFormat> Decoder = new PaperDownloadFormatDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperDownloadFormat" />
        /// class.</para>
        /// </summary>
        public PaperDownloadFormat()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Docx</para>
        /// </summary>
        public bool IsDocx
        {
            get
            {
                return this is Docx;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Docx, or <c>null</c>.</para>
        /// </summary>
        public Docx AsDocx
        {
            get
            {
                return this as Docx;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Html</para>
        /// </summary>
        public bool IsHtml
        {
            get
            {
                return this is Html;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Html, or <c>null</c>.</para>
        /// </summary>
        public Html AsHtml
        {
            get
            {
                return this as Html;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Markdown</para>
        /// </summary>
        public bool IsMarkdown
        {
            get
            {
                return this is Markdown;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Markdown, or <c>null</c>.</para>
        /// </summary>
        public Markdown AsMarkdown
        {
            get
            {
                return this as Markdown;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Pdf</para>
        /// </summary>
        public bool IsPdf
        {
            get
            {
                return this is Pdf;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Pdf, or <c>null</c>.</para>
        /// </summary>
        public Pdf AsPdf
        {
            get
            {
                return this as Pdf;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperDownloadFormat" />.</para>
        /// </summary>
        private class PaperDownloadFormatEncoder : enc.StructEncoder<PaperDownloadFormat>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperDownloadFormat value, enc.IJsonWriter writer)
            {
                if (value is Docx)
                {
                    WriteProperty(".tag", "docx", writer, enc.StringEncoder.Instance);
                    Docx.Encoder.EncodeFields((Docx)value, writer);
                    return;
                }
                if (value is Html)
                {
                    WriteProperty(".tag", "html", writer, enc.StringEncoder.Instance);
                    Html.Encoder.EncodeFields((Html)value, writer);
                    return;
                }
                if (value is Markdown)
                {
                    WriteProperty(".tag", "markdown", writer, enc.StringEncoder.Instance);
                    Markdown.Encoder.EncodeFields((Markdown)value, writer);
                    return;
                }
                if (value is Pdf)
                {
                    WriteProperty(".tag", "pdf", writer, enc.StringEncoder.Instance);
                    Pdf.Encoder.EncodeFields((Pdf)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperDownloadFormat" />.</para>
        /// </summary>
        private class PaperDownloadFormatDecoder : enc.UnionDecoder<PaperDownloadFormat>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperDownloadFormat" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperDownloadFormat Create()
            {
                return new PaperDownloadFormat();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperDownloadFormat Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "docx":
                        return Docx.Decoder.DecodeFields(reader);
                    case "html":
                        return Html.Decoder.DecodeFields(reader);
                    case "markdown":
                        return Markdown.Decoder.DecodeFields(reader);
                    case "pdf":
                        return Pdf.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The docx object</para>
        /// </summary>
        public sealed class Docx : PaperDownloadFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Docx> Encoder = new DocxEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Docx> Decoder = new DocxDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Docx" /> class.</para>
            /// </summary>
            private Docx()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Docx</para>
            /// </summary>
            public static readonly Docx Instance = new Docx();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Docx" />.</para>
            /// </summary>
            private class DocxEncoder : enc.StructEncoder<Docx>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Docx value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Docx" />.</para>
            /// </summary>
            private class DocxDecoder : enc.StructDecoder<Docx>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Docx" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Docx Create()
                {
                    return Docx.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The html object</para>
        /// </summary>
        public sealed class Html : PaperDownloadFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Html> Encoder = new HtmlEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Html> Decoder = new HtmlDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Html" /> class.</para>
            /// </summary>
            private Html()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Html</para>
            /// </summary>
            public static readonly Html Instance = new Html();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Html" />.</para>
            /// </summary>
            private class HtmlEncoder : enc.StructEncoder<Html>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Html value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Html" />.</para>
            /// </summary>
            private class HtmlDecoder : enc.StructDecoder<Html>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Html" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Html Create()
                {
                    return Html.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The markdown object</para>
        /// </summary>
        public sealed class Markdown : PaperDownloadFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Markdown> Encoder = new MarkdownEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Markdown> Decoder = new MarkdownDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Markdown" /> class.</para>
            /// </summary>
            private Markdown()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Markdown</para>
            /// </summary>
            public static readonly Markdown Instance = new Markdown();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Markdown" />.</para>
            /// </summary>
            private class MarkdownEncoder : enc.StructEncoder<Markdown>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Markdown value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Markdown" />.</para>
            /// </summary>
            private class MarkdownDecoder : enc.StructDecoder<Markdown>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Markdown" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Markdown Create()
                {
                    return Markdown.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The pdf object</para>
        /// </summary>
        public sealed class Pdf : PaperDownloadFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Pdf> Encoder = new PdfEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Pdf> Decoder = new PdfDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Pdf" /> class.</para>
            /// </summary>
            private Pdf()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Pdf</para>
            /// </summary>
            public static readonly Pdf Instance = new Pdf();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Pdf" />.</para>
            /// </summary>
            private class PdfEncoder : enc.StructEncoder<Pdf>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Pdf value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Pdf" />.</para>
            /// </summary>
            private class PdfDecoder : enc.StructDecoder<Pdf>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Pdf" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Pdf Create()
                {
                    return Pdf.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperDownloadFormat
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

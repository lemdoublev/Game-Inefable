// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Data structure representing a Paper folder.</para>
    /// </summary>
    public class Folder
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<Folder> Encoder = new FolderEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<Folder> Decoder = new FolderDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Folder" /> class.</para>
        /// </summary>
        /// <param name="id">Paper folder ID. This ID uniquely identifies the folder.</param>
        /// <param name="name">Paper folder name.</param>
        public Folder(string id,
                      string name)
        {
            if (id == null)
            {
                throw new sys.ArgumentNullException("id");
            }

            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            this.Id = id;
            this.Name = name;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Folder" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public Folder()
        {
        }

        /// <summary>
        /// <para>Paper folder ID. This ID uniquely identifies the folder.</para>
        /// </summary>
        public string Id { get; protected set; }

        /// <summary>
        /// <para>Paper folder name.</para>
        /// </summary>
        public string Name { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="Folder" />.</para>
        /// </summary>
        private class FolderEncoder : enc.StructEncoder<Folder>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(Folder value, enc.IJsonWriter writer)
            {
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="Folder" />.</para>
        /// </summary>
        private class FolderDecoder : enc.StructDecoder<Folder>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="Folder" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override Folder Create()
            {
                return new Folder();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(Folder value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

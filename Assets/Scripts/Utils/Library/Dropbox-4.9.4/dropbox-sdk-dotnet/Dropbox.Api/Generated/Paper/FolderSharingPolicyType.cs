// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The sharing policy of a Paper folder.</para>
    /// <para></para>
    /// <para>Note: The sharing policy of subfolders is inherited from the root folder.</para>
    /// </summary>
    public class FolderSharingPolicyType
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FolderSharingPolicyType> Encoder = new FolderSharingPolicyTypeEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FolderSharingPolicyType> Decoder = new FolderSharingPolicyTypeDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FolderSharingPolicyType" />
        /// class.</para>
        /// </summary>
        public FolderSharingPolicyType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Team</para>
        /// </summary>
        public bool IsTeam
        {
            get
            {
                return this is Team;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Team, or <c>null</c>.</para>
        /// </summary>
        public Team AsTeam
        {
            get
            {
                return this as Team;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InviteOnly</para>
        /// </summary>
        public bool IsInviteOnly
        {
            get
            {
                return this is InviteOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InviteOnly, or <c>null</c>.</para>
        /// </summary>
        public InviteOnly AsInviteOnly
        {
            get
            {
                return this as InviteOnly;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FolderSharingPolicyType" />.</para>
        /// </summary>
        private class FolderSharingPolicyTypeEncoder : enc.StructEncoder<FolderSharingPolicyType>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FolderSharingPolicyType value, enc.IJsonWriter writer)
            {
                if (value is Team)
                {
                    WriteProperty(".tag", "team", writer, enc.StringEncoder.Instance);
                    Team.Encoder.EncodeFields((Team)value, writer);
                    return;
                }
                if (value is InviteOnly)
                {
                    WriteProperty(".tag", "invite_only", writer, enc.StringEncoder.Instance);
                    InviteOnly.Encoder.EncodeFields((InviteOnly)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FolderSharingPolicyType" />.</para>
        /// </summary>
        private class FolderSharingPolicyTypeDecoder : enc.UnionDecoder<FolderSharingPolicyType>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FolderSharingPolicyType"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FolderSharingPolicyType Create()
            {
                return new FolderSharingPolicyType();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override FolderSharingPolicyType Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "team":
                        return Team.Decoder.DecodeFields(reader);
                    case "invite_only":
                        return InviteOnly.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Everyone in your team and anyone directly invited can access this
        /// folder.</para>
        /// </summary>
        public sealed class Team : FolderSharingPolicyType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Team> Encoder = new TeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Team> Decoder = new TeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Team" /> class.</para>
            /// </summary>
            private Team()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Team</para>
            /// </summary>
            public static readonly Team Instance = new Team();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Team" />.</para>
            /// </summary>
            private class TeamEncoder : enc.StructEncoder<Team>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Team value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Team" />.</para>
            /// </summary>
            private class TeamDecoder : enc.StructDecoder<Team>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Team" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Team Create()
                {
                    return Team.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Only people directly invited can access this folder.</para>
        /// </summary>
        public sealed class InviteOnly : FolderSharingPolicyType
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InviteOnly> Encoder = new InviteOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InviteOnly> Decoder = new InviteOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InviteOnly" /> class.</para>
            /// </summary>
            private InviteOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InviteOnly</para>
            /// </summary>
            public static readonly InviteOnly Instance = new InviteOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InviteOnly" />.</para>
            /// </summary>
            private class InviteOnlyEncoder : enc.StructEncoder<InviteOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InviteOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InviteOnly" />.</para>
            /// </summary>
            private class InviteOnlyDecoder : enc.StructDecoder<InviteOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InviteOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InviteOnly Create()
                {
                    return InviteOnly.Instance;
                }

            }

            #endregion
        }
    }
}

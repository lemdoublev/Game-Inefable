// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamPolicies
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The group creation object</para>
    /// </summary>
    public class GroupCreation
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<GroupCreation> Encoder = new GroupCreationEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<GroupCreation> Decoder = new GroupCreationDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="GroupCreation" /> class.</para>
        /// </summary>
        public GroupCreation()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AdminsAndMembers</para>
        /// </summary>
        public bool IsAdminsAndMembers
        {
            get
            {
                return this is AdminsAndMembers;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AdminsAndMembers, or <c>null</c>.</para>
        /// </summary>
        public AdminsAndMembers AsAdminsAndMembers
        {
            get
            {
                return this as AdminsAndMembers;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AdminsOnly</para>
        /// </summary>
        public bool IsAdminsOnly
        {
            get
            {
                return this is AdminsOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AdminsOnly, or <c>null</c>.</para>
        /// </summary>
        public AdminsOnly AsAdminsOnly
        {
            get
            {
                return this as AdminsOnly;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="GroupCreation" />.</para>
        /// </summary>
        private class GroupCreationEncoder : enc.StructEncoder<GroupCreation>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(GroupCreation value, enc.IJsonWriter writer)
            {
                if (value is AdminsAndMembers)
                {
                    WriteProperty(".tag", "admins_and_members", writer, enc.StringEncoder.Instance);
                    AdminsAndMembers.Encoder.EncodeFields((AdminsAndMembers)value, writer);
                    return;
                }
                if (value is AdminsOnly)
                {
                    WriteProperty(".tag", "admins_only", writer, enc.StringEncoder.Instance);
                    AdminsOnly.Encoder.EncodeFields((AdminsOnly)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="GroupCreation" />.</para>
        /// </summary>
        private class GroupCreationDecoder : enc.UnionDecoder<GroupCreation>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="GroupCreation" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override GroupCreation Create()
            {
                return new GroupCreation();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override GroupCreation Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "admins_and_members":
                        return AdminsAndMembers.Decoder.DecodeFields(reader);
                    case "admins_only":
                        return AdminsOnly.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Team admins and members can create groups.</para>
        /// </summary>
        public sealed class AdminsAndMembers : GroupCreation
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AdminsAndMembers> Encoder = new AdminsAndMembersEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AdminsAndMembers> Decoder = new AdminsAndMembersDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AdminsAndMembers" />
            /// class.</para>
            /// </summary>
            private AdminsAndMembers()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AdminsAndMembers</para>
            /// </summary>
            public static readonly AdminsAndMembers Instance = new AdminsAndMembers();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AdminsAndMembers" />.</para>
            /// </summary>
            private class AdminsAndMembersEncoder : enc.StructEncoder<AdminsAndMembers>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AdminsAndMembers value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AdminsAndMembers" />.</para>
            /// </summary>
            private class AdminsAndMembersDecoder : enc.StructDecoder<AdminsAndMembers>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AdminsAndMembers" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AdminsAndMembers Create()
                {
                    return AdminsAndMembers.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Only team admins can create groups.</para>
        /// </summary>
        public sealed class AdminsOnly : GroupCreation
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AdminsOnly> Encoder = new AdminsOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AdminsOnly> Decoder = new AdminsOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AdminsOnly" /> class.</para>
            /// </summary>
            private AdminsOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AdminsOnly</para>
            /// </summary>
            public static readonly AdminsOnly Instance = new AdminsOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AdminsOnly" />.</para>
            /// </summary>
            private class AdminsOnlyEncoder : enc.StructEncoder<AdminsOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AdminsOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AdminsOnly" />.</para>
            /// </summary>
            private class AdminsOnlyDecoder : enc.StructDecoder<AdminsOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AdminsOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AdminsOnly Create()
                {
                    return AdminsOnly.Instance;
                }

            }

            #endregion
        }
    }
}
